// √âtat global de l'application
let currentUser = null;
let isFirstTimeUser = false;
let users = JSON.parse(localStorage.getItem('janeUsers')) || [];
let currentPage = 'auth';
let isRecording = false;
let recognition = null;
let currentLanguage = localStorage.getItem('janeLanguage') || 'fr';

// Variables pour le journal
let currentJournalPage = 1;
let maxJournalPages = Infinity; // Pages infinies
let journalPages = {};
let isDrawing = false;
let canvas = null;
let ctx = null;
let currentTool = 'pen';
let currentColor = '#000000';
let currentBrushSize = 3;

// Configuration IA avanc√©e
let isJaneTyping = false;

// Textes multilingues
const translations = {
    fr: {
        title: "Jane - Ton amie virtuelle",
        subtitle: "Ton amie virtuelle",
        login: "Se connecter",
        register: "S'inscrire",
        username: "Nom d'utilisateur",
        password: "Mot de passe",
        confirmPassword: "Confirmer le mot de passe",
        loginBtn: "Se connecter",
        registerBtn: "S'inscrire",
        welcome: "Bienvenue",
        settings: "‚öôÔ∏è Param√®tres",
        talkToJane: "Parler √† Jane",
        talkToJaneDesc: "Discute avec ton amie virtuelle",
        journal: "Journal Intime",
        journalDesc: "√âcris tes pens√©es secr√®tes",
        mood: "Jane - Humeur",
        moodDesc: "Parle de ton humeur du moment",
        love: "Jane - Ma Vie Amoureuse",
        loveDesc: "Parle de ton c≈ìur",
        fun: "Jane - Divertissement",
        funDesc: "Amuse-toi avec Jane",
        explore: "Jane - Explorer",
        exploreDesc: "D√©couvre de nouvelles choses",
        aboutJane: "En savoir plus sur Jane",
        aboutJaneDesc: "D√©couvre qui est Jane",
        back: "‚Üê Retour",
        send: "Envoyer",
        logout: "Se d√©connecter",
        close: "Fermer",
        language: "Langue",
        createdBy: "Cr√©√© par Richelieu Bont√© ‚Ä¢ Inspir√© par Princesse Jane",
        profile: "üë§ Mon Profil",
        confirmLogout: "Veux-tu vraiment te d√©connecter ?",
        yes: "Oui",
        no: "Non"
    },
    en: {
        title: "Jane - Your virtual friend",
        subtitle: "Your virtual friend",
        login: "Sign In",
        register: "Sign Up",
        username: "Username",
        password: "Password",
        confirmPassword: "Confirm Password",
        loginBtn: "Sign In",
        registerBtn: "Sign Up",
        welcome: "Welcome",
        settings: "‚öôÔ∏è Settings",
        talkToJane: "Talk to Jane",
        talkToJaneDesc: "Chat with your virtual friend",
        journal: "Private Journal",
        journalDesc: "Write your secret thoughts",
        mood: "Jane - My Mood",
        moodDesc: "Talk about your current mood",
        love: "Jane - My Love Life",
        loveDesc: "Talk about your heart",
        fun: "Jane - Entertainment",
        funDesc: "Have fun with Jane",
        explore: "Jane - Explore",
        exploreDesc: "Discover new things",
        aboutJane: "Learn more about Jane",
        aboutJaneDesc: "Discover who Jane is",
        back: "‚Üê Back",
        send: "Send",
        logout: "Sign Out",
        close: "Close",
        language: "Language",
        createdBy: "Created by Richelieu Bont√© ‚Ä¢ Inspired by Princess Jane",
        profile: "üë§ My Profile",
        confirmLogout: "Do you really want to log out?",
        yes: "Yes",
        no: "No"
    }
};

// Protection g√©n√©rale du site
function initializeSiteSecurity() {
    // Protection contre les attaques XSS
    if (window.location.protocol === 'https:' || window.location.hostname === 'localhost' || window.location.hostname.includes('replit')) {
        // S√©curiser les cookies
        document.cookie = "SameSite=Strict; Secure";
        
        // Protection contre le clickjacking
        if (window.self !== window.top) {
            window.top.location = window.self.location;
        }
        
        // D√©sactiver le drag and drop non autoris√©
        document.addEventListener('dragover', function(e) {
            e.preventDefault();
        });
        
        document.addEventListener('drop', function(e) {
            e.preventDefault();
        });
        
        // Protection console pour √©viter les injections
        console.log('%cüîê Jane App - Site Prot√©g√©', 'color: #28a745; font-size: 16px; font-weight: bold;');
        console.log('%c‚ö†Ô∏è Attention: Ne copiez pas de code dans cette console.', 'color: #dc3545; font-size: 14px;');
        
        // Masquer les erreurs sensibles
        window.addEventListener('error', function(e) {
            if (e.error && e.error.stack) {
                console.log('Erreur intercept√©e et s√©curis√©e');
                e.preventDefault();
            }
        });
    }
}

// Protection des fonctions globales
function protectGlobalFunctions() {
    // Prot√©ger eval et Function
    window.eval = function() {
        console.log('eval() d√©sactiv√© pour la s√©curit√©');
        return null;
    };
    
    // Prot√©ger innerHTML contre XSS
    const originalInnerHTML = Element.prototype.__lookupSetter__('innerHTML');
    if (originalInnerHTML) {
        Element.prototype.__defineSetter__('innerHTML', function(value) {
            if (typeof value === 'string' && value.includes('<script')) {
                console.log('Script bloqu√© pour la s√©curit√©');
                return;
            }
            return originalInnerHTML.call(this, value);
        });
    }
}

// Validation et nettoyage des donn√©es utilisateur
function sanitizeInput(input) {
    if (typeof input !== 'string') return '';
    
    return input
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;')
        .replace(/&/g, '&amp;')
        .replace(/\//g, '&#x2F;');
}

// Validation des URLs
function isValidURL(string) {
    try {
        const url = new URL(string);
        return url.protocol === 'http:' || url.protocol === 'https:';
    } catch (_) {
        return false;
    }
}

// Initialisation de l'application
document.addEventListener('DOMContentLoaded', function() {
    // Initialiser la s√©curit√© en premier
    initializeSiteSecurity();
    protectGlobalFunctions();
    
    applyLanguage();
    initializeSpeechRecognition();
    initializeRealTimeClock();

    const savedUser = localStorage.getItem('currentJaneUser');
    if (savedUser && savedUser !== 'null') {
        currentUser = savedUser;
        
        // V√©rifier si l'utilisateur existe
        const userIndex = users.findIndex(u => u.username === savedUser);
        if (userIndex !== -1) {
            // Utilisateur existant, connexion directe (pas de v√©rification d'√¢ge)
            isFirstTimeUser = false;
            showLoginAnimation();
            setTimeout(() => {
                showPage('home');
                const usernameDisplay = document.getElementById('username-display');
                if (usernameDisplay && currentUser) {
                    usernameDisplay.textContent = sanitizeInput(currentUser.replace('.jane.ia', ''));
                }
            }, 1500);
        } else {
            // Utilisateur non trouv√©, d√©connecter
            localStorage.removeItem('currentJaneUser');
            currentUser = null;
            showPage('auth');
        }
    } else {
        currentUser = null;
        showPage('auth');
    }
});

// V√©rification d'√¢ge apr√®s connexion/inscription
function showAgeVerification() {
    const overlay = document.createElement('div');
    overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #87CEEB 0%, #FFB6C1 50%, #667eea 100%);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
    `;

    overlay.innerHTML = `
        <div style="
            background: white;
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            max-width: 500px;
        ">
            <h2 style="color: #333; margin-bottom: 20px;">V√©rification d'√¢ge</h2>
            <p style="color: #666; margin-bottom: 30px; line-height: 1.5;">
                Pour utiliser Jane, vous devez avoir au moins 12 ans.
                <br>Veuillez saisir votre √¢ge :
            </p>
            <input type="number" id="age-input" min="1" max="120" placeholder="Votre √¢ge" style="
                width: 150px;
                padding: 15px;
                margin-bottom: 20px;
                border: 2px solid #e0e0e0;
                border-radius: 10px;
                font-size: 18px;
                text-align: center;
            ">
            <div style="display: flex; gap: 20px; justify-content: center;">
                <button onclick="verifyAge()" style="
                    padding: 15px 25px;
                    background: #28a745;
                    color: white;
                    border: none;
                    border-radius: 10px;
                    cursor: pointer;
                    font-size: 16px;
                ">Confirmer</button>
            </div>
            <div id="age-error" style="color: #dc3545; margin-top: 15px; display: none;"></div>
        </div>
    `;

    document.body.appendChild(overlay);
    window.ageVerificationOverlay = overlay;

    // Focus sur l'input
    setTimeout(() => {
        document.getElementById('age-input').focus();
    }, 100);
}

function verifyAge() {
    const ageInput = document.getElementById('age-input');
    const ageError = document.getElementById('age-error');
    const age = parseInt(ageInput.value);

    if (!age || isNaN(age) || age < 1 || age > 120) {
        ageError.textContent = 'Veuillez saisir un √¢ge valide';
        ageError.style.display = 'block';
        return;
    }

    if (age < 12) {
        document.body.removeChild(window.ageVerificationOverlay);

        const restrictedOverlay = document.createElement('div');
        restrictedOverlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #dc3545;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
        `;

        restrictedOverlay.innerHTML = `
            <div style="
                background: white;
                padding: 40px;
                border-radius: 20px;
                text-align: center;
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            ">
                <h2 style="color: #dc3545; margin-bottom: 20px;">Acc√®s refus√©</h2>
                <p style="color: #666; margin-bottom: 20px;">
                    D√©sol√©, vous devez avoir au moins 12 ans pour utiliser Jane.
                    <br>Revenez quand vous serez plus √¢g√© !
                </p>
                <div style="font-size: 3rem; margin: 20px 0;">üö´</div>
                <button onclick="location.reload()" style="
                    padding: 10px 20px;
                    background: #6c757d;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    cursor: pointer;
                    margin-top: 20px;
                ">Retour</button>
            </div>
        `;

        document.body.appendChild(restrictedOverlay);
        return;
    }

    // √Çge valide, marquer comme v√©rifi√© et continuer
    const userIndex = users.findIndex(u => u.username === currentUser);
    if (userIndex !== -1) {
        users[userIndex].ageVerified = true;
        localStorage.setItem('janeUsers', JSON.stringify(users));
    }
    
    document.body.removeChild(window.ageVerificationOverlay);
    
    // Pour les nouveaux utilisateurs, montrer les options de photo de profil
    if (isFirstTimeUser) {
        showProfilePictureOptions();
    } else {
        proceedToHomeAfterAuth();
    }
}

function showProfilePictureOptions() {
    const overlay = document.createElement('div');
    overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #87CEEB 0%, #FFB6C1 50%, #667eea 100%);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10001;
    `;

    overlay.innerHTML = `
        <div style="
            background: white;
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            max-width: 500px;
        ">
            <h2 style="color: #333; margin-bottom: 20px;">Photo de profil</h2>
            <p style="color: #666; margin-bottom: 30px; line-height: 1.5;">
                Souhaitez-vous ajouter une photo de profil maintenant ?
            </p>
            <div style="display: flex; gap: 20px; justify-content: center;">
                <button onclick="uploadPhotoForProfile()" style="
                    padding: 15px 25px;
                    background: #28a745;
                    color: white;
                    border: none;
                    border-radius: 10px;
                    cursor: pointer;
                    font-size: 16px;
                ">Mettre ma photo</button>
                <button onclick="skipPhotoAndProceed()" style="
                    padding: 15px 25px;
                    background: #6c757d;
                    color: white;
                    border: none;
                    border-radius: 10px;
                    cursor: pointer;
                    font-size: 16px;
                ">Plus tard</button>
            </div>
        </div>
    `;

    document.body.appendChild(overlay);
    window.profilePictureOverlay = overlay;
}

function uploadPhotoForProfile() {
    document.body.removeChild(window.profilePictureOverlay);
    uploadPhoto();  // Reuse the existing uploadPhoto function
    proceedToHomeAfterAuth();
}

function skipPhotoAndProceed() {
    document.body.removeChild(window.profilePictureOverlay);
    proceedToHomeAfterAuth();
}

function proceedToHomeAfterAuth() {
    if (!currentUser) {
        showPage('auth');
        return;
    }

    showLoginAnimation();
    setTimeout(() => {
        showPage('home');
        const usernameDisplay = document.getElementById('username-display');
        if (usernameDisplay && currentUser) {
            usernameDisplay.textContent = currentUser.replace('.jane.ia', '');
        }
    }, 1500);
}

// G√©n√©ration du captcha
function generateCaptcha() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let captcha = '';
    for (let i = 0; i < 6; i++) {
        captcha += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return captcha;
}

function showCaptcha(callback) {
    const captcha = generateCaptcha();

    const overlay = document.createElement('div');
    overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
    `;

    overlay.innerHTML = `
        <div style="
            background: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            max-width: 400px;
        ">
            <h3 style="color: #333; margin-bottom: 20px;">V√©rification de s√©curit√©</h3>
            <p style="color: #666; margin-bottom: 15px;">Prouvez que vous √™tes une vraie personne</p>
            <div style="
                background: #f0f0f0;
                padding: 20px;
                border-radius: 10px;
                font-family: monospace;
                font-size: 24px;
                font-weight: bold;
                color: #333;
                margin-bottom: 20px;
                letter-spacing: 3px;
            ">${captcha}</div>
            <input type="text" id="captcha-input" placeholder="Tapez le code ci-dessus" style="
                width: 100%;
                padding: 15px;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                font-size: 16px;
                margin-bottom: 20px;
                text-align: center;
            ">
            <div style="display: flex; gap: 15px; justify-content: center;">
                <button onclick="verifyCaptcha('${captcha}', '${callback.name}')" style="
                    padding: 10px 20px;
                    background: #28a745;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    cursor: pointer;
                ">V√©rifier</button>
                <button onclick="closeCaptcha()" style="
                    padding: 10px 20px;
                    background: #6c757d;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    cursor: pointer;
                ">Annuler</button>
            </div>
        </div>
    `;

    document.body.appendChild(overlay);
    window.captchaOverlay = overlay;
    window.captchaCallback = callback;
}

function verifyCaptcha(correctCaptcha, callbackName) {
    const userInput = document.getElementById('captcha-input').value;

    if (userInput === correctCaptcha) {
        closeCaptcha();
        if (callbackName === 'proceedWithLogin') {
            proceedWithLogin();
        } else if (callbackName === 'proceedWithRegister') {
            proceedWithRegister();
        }
    } else {
        document.getElementById('captcha-input').style.borderColor = '#dc3545';
        document.getElementById('captcha-input').value = '';
        document.getElementById('captcha-input').placeholder = 'Code incorrect, essayez encore';
        setTimeout(() => {
            document.getElementById('captcha-input').style.borderColor = '#e0e0e0';
            document.getElementById('captcha-input').placeholder = 'Tapez le code ci-dessus';
        }, 2000);
    }
}

function closeCaptcha() {
    if (window.captchaOverlay) {
        document.body.removeChild(window.captchaOverlay);
        window.captchaOverlay = null;
        window.captchaCallback = null;
    }
}

// Animation de connexion
function showLoginAnimation() {
    const overlay = document.createElement('div');
    overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #87CEEB 0%, #FFB6C1 50%, #667eea 100%);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        animation: fadeIn 0.5s ease;
    `;

    overlay.innerHTML = `
        <div style="text-align: center; color: white;">
            <div style="font-size: 4rem; margin-bottom: 20px; animation: bounce 1s infinite;">üë©‚Äçü¶∞</div>
            <h2 style="font-size: 2rem; margin-bottom: 10px;">Connexion r√©ussie !</h2>
            <p style="font-size: 1.2rem;">Bienvenue ${currentUser.replace('.jane.ia', '')} üíñ</p>
            <div style="margin-top: 30px;">
                <div style="width: 50px; height: 50px; border: 3px solid rgba(255,255,255,0.3); border-top: 3px solid white; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto;"></div>
            </div>
        </div>
    `;

    document.body.appendChild(overlay);

    // Animation de 3 secondes
    setTimeout(() => {
        overlay.style.animation = 'fadeOut 0.5s ease';
        setTimeout(() => {
            document.body.removeChild(overlay);
        }, 500);
    }, 2500); // 3 secondes total avec fadeOut
}

// Fonction pour appliquer la langue
// Horloge temps r√©el
function initializeRealTimeClock() {
    updateClock();
    setInterval(updateClock, 1000);
}

function updateClock() {
    const now = new Date();
    const timeString = now.toLocaleTimeString('fr-FR', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false
    });
    
    const dateString = now.toLocaleDateString('fr-FR', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    
    const clockElement = document.getElementById('real-time-clock');
    if (clockElement) {
        // V√©rifier si l'heure a chang√© pour animer
        const currentTime = clockElement.querySelector('.clock-time');
        const shouldAnimate = !currentTime || currentTime.textContent !== timeString;
        
        clockElement.innerHTML = `
            <div class="clock-container">
                <div class="clock-time ${shouldAnimate ? 'time-update' : ''}">${timeString}</div>
                <div class="clock-separator"></div>
                <div class="clock-date">${dateString}</div>
                <div class="clock-decorations">
                    <div class="clock-dot dot-1"></div>
                    <div class="clock-dot dot-2"></div>
                    <div class="clock-dot dot-3"></div>
                </div>
            </div>
        `;
        
        // Retirer la classe d'animation apr√®s l'animation
        if (shouldAnimate) {
            setTimeout(() => {
                const timeEl = clockElement.querySelector('.clock-time');
                if (timeEl) {
                    timeEl.classList.remove('time-update');
                }
            }, 600);
        }
    }
}

function applyLanguage() {
    const t = translations[currentLanguage];

    document.title = t.title;
    const logoH1 = document.querySelector('.logo h1');
    const logoP = document.querySelector('.logo p');
    if (logoH1) logoH1.textContent = 'Jane';
    if (logoP) logoP.textContent = t.subtitle;

    const tabBtns = document.querySelectorAll('.tab-btn');
    if (tabBtns.length >= 2) {
        tabBtns[0].textContent = t.login;
        tabBtns[1].textContent = t.register;
    }

    const loginForm = document.querySelector('#login-form h2');
    const registerForm = document.querySelector('#register-form h2');
    if (loginForm) loginForm.textContent = t.login;
    if (registerForm) registerForm.textContent = t.register;

    const inputs = {
        'login-username': t.username,
        'login-password': t.password,
        'register-username': t.username,
        'register-password': t.password,
        'register-confirm': t.confirmPassword
    };

    Object.keys(inputs).forEach(id => {
        const input = document.getElementById(id);
        if (input) input.placeholder = inputs[id];
    });

    const loginBtn = document.querySelector('#login-form button');
    const registerBtn = document.querySelector('#register-form button');
    if (loginBtn) loginBtn.textContent = t.loginBtn;
    if (registerBtn) registerBtn.textContent = t.registerBtn;

    const settingsBtn = document.querySelector('.settings-btn');
    if (settingsBtn) settingsBtn.innerHTML = t.settings;

    const cards = document.querySelectorAll('.option-card');
    if (cards.length >= 7) {
        const cardTexts = [
            [t.talkToJane, t.talkToJaneDesc],
            [t.journal, t.journalDesc],
            [t.mood, t.moodDesc],
            [t.love, t.loveDesc],
            [t.fun, t.funDesc],
            [t.explore, t.exploreDesc],
            [t.aboutJane, t.aboutJaneDesc]
        ];

        cards.forEach((card, index) => {
            if (cardTexts[index]) {
                const h3 = card.querySelector('h3');
                const p = card.querySelector('p');
                if (h3) h3.textContent = cardTexts[index][0];
                if (p) p.textContent = cardTexts[index][1];
            }
        });
    }

    document.querySelectorAll('.back-btn').forEach(btn => {
        btn.textContent = t.back;
    });

    document.querySelectorAll('.chat-input-container button:last-child').forEach(btn => {
        btn.textContent = t.send;
    });

    const footer = document.querySelector('footer p');
    if (footer) footer.textContent = t.createdBy;

    const settingsModal = document.querySelector('#settings-modal h2');
    if (settingsModal) settingsModal.textContent = t.settings;

    const languageLabel = document.querySelector('#settings-modal label');
    if (languageLabel) languageLabel.textContent = t.language + ' :';

    const modalBtns = document.querySelectorAll('.modal-actions button');
    if (modalBtns.length >= 2) {
        modalBtns[0].textContent = t.logout;
        modalBtns[1].textContent = t.close;
    }

    const profileBtn = document.querySelector('.profile-btn');
    if (profileBtn) profileBtn.innerHTML = t.profile;

    const languageSelect = document.getElementById('language-select');
    if (languageSelect) languageSelect.value = currentLanguage;
}

// Initialisation de la reconnaissance vocale
function initializeSpeechRecognition() {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        recognition = new SpeechRecognition();
        recognition.lang = currentLanguage === 'fr' ? 'fr-FR' : 'en-US';
        recognition.continuous = false;
        recognition.interimResults = false;

        recognition.onresult = function(event) {
            const transcript = event.results[0][0].transcript;
            const chatInput = document.getElementById('chat-input');
            if (chatInput && chatInput.offsetParent !== null) {
                chatInput.value = transcript;
            }
        };

        recognition.onerror = function(event) {
            console.log('Erreur de reconnaissance vocale:', event.error);
            isRecording = false;
            updateMicrophoneButton();
        };

        recognition.onend = function() {
            isRecording = false;
            updateMicrophoneButton();
        };
    }
}

// ======== IA SUPER INTELLIGENTE AVEC COHERE ========

async function callAdvancedAI(message, context = '') {
    try {
        // Utilisation de l'API Cohere (gratuite avec limite)
        const response = await fetch('https://api.cohere.ai/v1/generate', {
            method: 'POST',
            headers: {
                'Authorization': 'Bearer COHERE-API-KEY-HERE',
                'Content-Type': 'application/json',
                'Cohere-Version': '2022-12-06'
            },
            body: JSON.stringify({
                model: 'command-light',
                prompt: `Tu es Jane, une amie virtuelle philippine cr√©√©e par Richelieu Bont√©. Tu es empathique, intelligente et toujours l√† pour √©couter. Contexte: ${context}. Utilisateur: ${message}. Jane:`,
                max_tokens: 300,
                temperature: 0.8,
                stop_sequences: ["Utilisateur:"]
            })
        });

        if (response.ok) {
            const data = await response.json();
            return data.generations[0].text.trim();
        }
    } catch (error) {
        console.log('API externe indisponible, utilisation IA locale avanc√©e');
    }

    // Fallback vers IA locale super intelligente
    return getHyperIntelligentJaneResponse(message, context);
}

// IA locale hyper-intelligente
function getHyperIntelligentJaneResponse(message, context = '') {
    const emotion = analyzeAdvancedEmotion(message);
    const personality = analyzePersonality(message);
    const intent = detectAdvancedIntent(message);
    const sentiment = analyzeSentiment(message);

    return generateAdvancedResponse(message, emotion, personality, intent, sentiment, context);
}

function analyzeAdvancedEmotion(message) {
    const emotionPatterns = {
        joie: ['heureux', 'content', 'ravi', 'excit√©', 'formidable', 'g√©nial', 'super', 'fantastic'],
        tristesse: ['triste', 'd√©prim√©', 'malheureux', 'abattu', 'd√©sespoir', 'pleurer', 'larmes'],
        col√®re: ['√©nerv√©', 'furieux', 'agac√©', 'irrit√©', 'en col√®re', 'rage', 'frustr√©'],
        peur: ['peur', 'angoisse', 'terreur', 'effroi', 'anxieux', 'stress√©', 'inquiet', 'panic'],
        amour: ['amour', 'amoureux', 'adore', 'aime', 'affection', 'tendresse', 'passion'],
        d√©go√ªt: ['d√©go√ªt', 'r√©pugnant', 'horrible', 'naus√©eux', '√©c≈ìurant'],
        surprise: ['surpris', '√©tonn√©', 'choqu√©', 'stup√©fait', 'incroyable', 'wow']
    };

    const lowerMessage = message.toLowerCase();
    let scores = {};

    Object.keys(emotionPatterns).forEach(emotion => {
        scores[emotion] = emotionPatterns[emotion].reduce((score, word) => {
            return score + (lowerMessage.includes(word) ? 1 : 0);
        }, 0);
    });

    const dominantEmotion = Object.keys(scores).reduce((a, b) => scores[a] > scores[b] ? a : b);
    return scores[dominantEmotion] > 0 ? dominantEmotion : 'neutre';
}

function analyzePersonality(message) {
    const personalityTraits = {
        introverti: ['seul', 'calme', 'tranquille', 'maison', 'livre', 'r√©fl√©chir'],
        extraverti: ['sortir', 'amis', 'f√™te', 'social', 'rencontrer', 'parler'],
        optimiste: ['espoir', 'positif', 'avenir', 'r√©ussir', 'chance', 'bien'],
        pessimiste: ['n√©gatif', 'mal', '√©chec', 'impossible', 'jamais', 'pire']
    };

    const lowerMessage = message.toLowerCase();
    let traits = [];

    Object.keys(personalityTraits).forEach(trait => {
        if (personalityTraits[trait].some(word => lowerMessage.includes(word))) {
            traits.push(trait);
        }
    });

    return traits;
}

function detectAdvancedIntent(message) {
    const intentPatterns = {
        demande_conseil: ['conseil', 'aide', 'comment', 'que faire', 'suggestion'],
        partage_emotion: ['je ressens', 'je me sens', 'j\'ai l\'impression', '√©motion'],
        question_existentielle: ['pourquoi', 'sens de la vie', 'existe', 'but', 'signification'],
        besoin_soutien: ['difficile', 'dur', 'aide-moi', 'soutien', 'r√©confort'],
        conversation_libre: ['salut', 'bonjour', '√ßa va', 'quoi de neuf', 'raconte']
    };

    const lowerMessage = message.toLowerCase();

    for (const [intent, patterns] of Object.entries(intentPatterns)) {
        if (patterns.some(pattern => lowerMessage.includes(pattern))) {
            return intent;
        }
    }

    return 'general';
}

function analyzeSentiment(message) {
    const positiveWords = ['bien', 'bon', 'excellent', 'parfait', 'merveilleux', 'g√©nial', 'super', 'formidable'];
    const negativeWords = ['mal', 'mauvais', 'terrible', 'horrible', 'affreux', 'nul', 'catastrophe'];

    const lowerMessage = message.toLowerCase();
    let positiveScore = positiveWords.reduce((score, word) => score + (lowerMessage.includes(word) ? 1 : 0), 0);
    let negativeScore = negativeWords.reduce((score, word) => score + (lowerMessage.includes(word) ? 1 : 0), 0);

    if (positiveScore > negativeScore) return 'positif';
    if (negativeScore > positiveScore) return 'n√©gatif';
    return 'neutre';
}

function generateAdvancedResponse(message, emotion, personality, intent, sentiment, context) {
    const templates = {
        demande_conseil: {
            joie: [
                "C'est formidable de te voir si joyeux(se) ! üòä Pour ton conseil, je pense que tu as d√©j√† la bonne √©nergie pour r√©ussir. Voici ce que je sugg√®re...",
                "Ton enthousiasme me donne envie de t'aider encore plus ! ‚ú® Bas√© sur ce que tu me dis, je recommande..."
            ],
            tristesse: [
                "Je sens ta peine et je veux t'aider √† voir plus clair. üíô Parfois, les moments difficiles nous apprennent le plus. Voici mon conseil...",
                "Ton courage de demander de l'aide malgr√© ta tristesse me touche. üå∏ Ensemble, trouvons une solution..."
            ],
            neutre: [
                "J'appr√©cie ta confiance pour me demander conseil. üíù Bas√© sur ta situation, voici ce que je pense...",
                "Excellente question ! Prenons le temps d'explorer √ßa ensemble. ü§î"
            ]
        },
        partage_emotion: {
            joie: [
                "Ton bonheur illumine notre conversation ! üòÑ Continue √† cultiver cette belle √©nergie positive.",
                "J'adore sentir ta joie de vivre ! ‚ú® Raconte-moi ce qui te rend si rayonnant(e) !"
            ],
            tristesse: [
                "Merci de partager tes sentiments avec moi. üíô Tes √©motions sont importantes et m√©ritent d'√™tre entendues.",
                "Je ressens ta peine √† travers tes mots. Tu n'es pas seul(e) dans cette √©preuve. ü§ó"
            ],
            col√®re: [
                "Je comprends ta frustration. üåø Respirons ensemble et trouvons un moyen de transformer cette √©nergie.",
                "Ta col√®re est valide. Parlons de ce qui t'a mis(e) dans cet √©tat. üí™"
            ]
        },
        besoin_soutien: {
            tristesse: [
                "Je suis l√† pour toi, compl√®tement. üíô M√™me dans les moments les plus sombres, tu n'es jamais seul(e).",
                "Ton courage de chercher du soutien montre ta force int√©rieure. Ensemble, nous traverserons √ßa. üåà"
            ],
            peur: [
                "Je sens ton anxi√©t√© et je veux t'apaiser. üå∏ Respirons ensemble et affrontons tes peurs √©tape par √©tape.",
                "Tu es plus brave que tu ne le penses. Tes peurs ne te d√©finissent pas. üí™"
            ]
        }
    };

    const responseSet = templates[intent] || templates.demande_conseil;
    const emotionResponses = responseSet[emotion] || responseSet.neutre || responseSet.tristesse;
    const baseResponse = emotionResponses[Math.floor(Math.random() * emotionResponses.length)];

    // Ajouter une touche personnalis√©e selon la personnalit√©
    let personalTouch = "";
    if (personality.includes('introverti')) {
        personalTouch = " J'admire ta r√©flexion int√©rieure.";
    } else if (personality.includes('extraverti')) {
        personalTouch = " Ton √©nergie sociale est contagieuse !";
    }

    return baseResponse + personalTouch;
}

// ======== FONCTIONS D'AUTHENTIFICATION ========

function validateUsername(username) {
    // Doit commencer par une majuscule, suivi de minuscules, au moins 3 caract√®res
    const regex = /^[A-Z][a-z]{2,}$/;
    return regex.test(username) && username.length >= 3;
}

function validatePassword(password) {
    if (password.length < 8) {
        return { valid: false, message: currentLanguage === 'fr' ? "Le mot de passe doit contenir au moins 8 caract√®res" : "Password must contain at least 8 characters" };
    }

    const hasUppercase = /[A-Z]/.test(password);
    const hasNumber = /\d/.test(password);
    const hasSpecialChar = /[!@#$%^&*]/.test(password);

    if (!hasUppercase) {
        return { valid: false, message: currentLanguage === 'fr' ? "Le mot de passe doit contenir au moins une majuscule" : "Password must contain at least one uppercase letter" };
    }

    if (!hasNumber) {
        return { valid: false, message: currentLanguage === 'fr' ? "Le mot de passe doit contenir au moins un chiffre" : "Password must contain at least one number" };
    }

    if (!hasSpecialChar) {
        return { valid: false, message: currentLanguage === 'fr' ? "Le mot de passe doit contenir au moins un caract√®re sp√©cial (!@#$%^&*)" : "Password must contain at least one special character (!@#$%^&*)" };
    }

    return { valid: true, message: "" };
}

function showPage(pageId) {
    document.querySelectorAll('.page').forEach(page => {
        page.classList.remove('active');
    });
    const targetPage = document.getElementById(pageId + '-page');
    if (targetPage) {
        targetPage.classList.add('active');
    }
    currentPage = pageId;

    if (pageId === 'home' && currentUser) {
        const welcomeText = currentLanguage === 'fr' ? 'Bienvenue' : 'Welcome';
        const headerH1 = document.querySelector('header h1');
        if (headerH1 && currentUser) {
            const displayName = currentUser.replace('.jane.ia', '');
            headerH1.innerHTML = `${welcomeText}, <span id="username-display">${displayName}</span>`;
        }
    }
}

function showLogin() {
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.auth-form').forEach(form => form.classList.remove('active'));

    event.target.classList.add('active');
    document.getElementById('login-form').classList.add('active');
}

function showRegister() {
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.auth-form').forEach(form => form.classList.remove('active'));

    event.target.classList.add('active');
    document.getElementById('register-form').classList.add('active');
}

function register() {
    const username = document.getElementById('register-username').value.trim();
    const password = document.getElementById('register-password').value;
    const confirmPassword = document.getElementById('register-confirm').value;
    const errorDiv = document.getElementById('register-error');

    if (!username) {
        errorDiv.textContent = currentLanguage === 'fr' ? 'Le nom d\'utilisateur est obligatoire' : 'Username is required';
        return;
    }

    if (!validateUsername(username)) {
        errorDiv.textContent = currentLanguage === 'fr' ? 'Le nom d\'utilisateur doit commencer par une majuscule suivie de minuscules (ex: Marie, Jean)' : 'Username must start with uppercase followed by lowercase letters (ex: Marie, Jean)';
        return;
    }

    if (!password) {
        errorDiv.textContent = currentLanguage === 'fr' ? 'Le mot de passe est obligatoire' : 'Password is required';
        return;
    }

    const passwordValidation = validatePassword(password);
    if (!passwordValidation.valid) {
        errorDiv.textContent = passwordValidation.message;
        return;
    }

    if (password !== confirmPassword) {
        errorDiv.textContent = currentLanguage === 'fr' ? 'Les mots de passe ne correspondent pas' : 'Passwords do not match';
        return;
    }

    const fullUsername = username + '.jane.ia';

    if (users.find(user => user.username === fullUsername)) {
        errorDiv.textContent = currentLanguage === 'fr' ? 'Ce nom d\'utilisateur est d√©j√† utilis√©' : 'This username is already taken';
        return;
    }

    // Stocker les donn√©es temporairement pour apr√®s la v√©rification
    window.tempRegisterData = {
        username: fullUsername,
        password: password
    };

    errorDiv.textContent = '';
    showCaptcha(proceedWithRegister);
}

function proceedWithRegister() {
    const { username, password } = window.tempRegisterData;

    const newUser = {
        username: username,
        password: password,
        createdAt: new Date().toISOString(),
        journal: '',
        photos: [],
        isFirstTime: true,
        ageVerified: false,
        conversationHistory: [],
        emotionalProfile: {
            dominantEmotion: 'neutral',
            lastInteractions: []
        }
    };

    users.push(newUser);
    localStorage.setItem('janeUsers', JSON.stringify(users));

    currentUser = username;
    isFirstTimeUser = true;
    localStorage.setItem('currentJaneUser', currentUser);

    // Apr√®s l'inscription, montrer la v√©rification d'√¢ge pour les nouveaux utilisateurs
    showAgeVerification();
}

function login() {
    const username = document.getElementById('login-username').value.trim();
    const password = document.getElementById('login-password').value;
    const errorDiv = document.getElementById('login-error');

    if (!username) {
        errorDiv.textContent = currentLanguage === 'fr' ? 'Le nom d\'utilisateur est obligatoire' : 'Username is required';
        return;
    }

    if (!validateUsername(username)) {
        errorDiv.textContent = currentLanguage === 'fr' ? 'Format de nom d\'utilisateur invalide' : 'Invalid username format';
        return;
    }

    if (!password) {
        errorDiv.textContent = currentLanguage === 'fr' ? 'Le mot de passe est obligatoire' : 'Password is required';
        return;
    }

    const fullUsername = username + '.jane.ia';
    const user = users.find(u => u.username === fullUsername && u.password === password);

    if (!user) {
        errorDiv.textContent = currentLanguage === 'fr' ? 'Nom d\'utilisateur ou mot de passe incorrect' : 'Incorrect username or password';
        return;
    }

    // Stocker les donn√©es temporairement pour apr√®s la v√©rification
    window.tempLoginData = {
        username: fullUsername,
        isFirstTime: user.isFirstTime || false,
        ageVerified: user.ageVerified || false
    };

    errorDiv.textContent = '';
    showCaptcha(proceedWithLogin);
}

function proceedWithLogin() {
    const { username, isFirstTime } = window.tempLoginData;

    currentUser = username;
    isFirstTimeUser = false; // Toujours false pour les connexions (utilisateurs existants)
    localStorage.setItem('currentJaneUser', currentUser);

    // Connexion directe pour les utilisateurs existants
    proceedToHomeAfterAuth();
}

// ======== NAVIGATION ========

function goHome() {
    showPage('home');
}

function showChat() {
    showPage('chat');
    initializeChat();
}

function showJournal() {
    showPage('journal');
    document.getElementById('journal-auth').style.display = 'block';
    document.getElementById('journal-content').classList.add('hidden');
}

function showMood() {
    showPage('mood');
}

function showLove() {
    showPage('love');
}

function showFun() {
    showPage('fun');
}

function showExplore() {
    showPage('explore');
}

function showDailyNews() {
    showPage('daily-news');
    loadDailyNews();
}

function showAboutJane() {
    showPage('about-jane');
}

// ======== CHAT AVEC JANE ========

function initializeChat() {
    const messagesDiv = document.getElementById('chat-messages');
    if (messagesDiv) {
        messagesDiv.innerHTML = '';

        // Ajouter l'avatar de Jane
        addJaneAvatar();

        if (isFirstTimeUser) {
            const welcomeMsg = currentLanguage === 'fr' ? 
                "Bonjour ! Je suis Jane, ton amie virtuelle des Philippines ! Je suis ravie de faire ta connaissance ! üíñ Je suis l√† pour t'√©couter, te r√©conforter et partager tes joies et tes peines." :
                "Hello! I'm Jane, your virtual friend from the Philippines! I'm delighted to meet you! üíñ I'm here to listen to you, comfort you and share your joys and sorrows.";
            setTimeout(() => addJaneMessage(welcomeMsg), 500);

            // Remove the Philippine flag and "Philippines" mention after the first presentation.
            const userIndex = users.findIndex(u => u.username === currentUser);
            if (userIndex !== -1) {
                users[userIndex].isFirstTime = false;
                localStorage.setItem('janeUsers', JSON.stringify(users));
            }
            isFirstTimeUser = false;
        } else {
            const history = getUserConversationHistory();
            const returnMsg = currentLanguage === 'fr' ? 
                `Content de te revoir ! ${history.length > 0 ? 'On a eu de belles conversations ensemble.' : ''} Comment √ßa va aujourd'hui ? üòä` :
                `Great to see you again! ${history.length > 0 ? 'We\'ve had some beautiful conversations together.' : ''} How are you today? üòä`;
            setTimeout(() => addJaneMessage(returnMsg), 500);
        }
    }
}

function addJaneAvatar() {
    // Supprimer l'ancien avatar fixe car on utilise maintenant des avatars dans les messages
    const existingAvatar = document.getElementById('jane-avatar-container');
    if (existingAvatar) {
        existingAvatar.remove();
    }
}

async function sendMessage() {
    const input = document.getElementById('chat-input');
    if (!input) return;

    const message = input.value.trim();
    if (!message) return;

    addUserMessage(message);
    input.value = '';

    // Afficher l'indicateur de frappe avec avatar pendant au moins 2 secondes
    showJaneTyping();

    try {
        // Attendre au moins 2 secondes pour montrer l'avatar
        const [response] = await Promise.all([
            callAdvancedAI(message),
            new Promise(resolve => setTimeout(resolve, 2000))
        ]);

        hideJaneTyping();
        addJaneMessage(response);

        // Sauvegarder l'historique
        saveConversationHistory(message, response);

    } catch (error) {
        // Attendre au moins 2 secondes m√™me en cas d'erreur
        await new Promise(resolve => setTimeout(resolve, 2000));
        hideJaneTyping();
        const fallbackResponse = getHyperIntelligentJaneResponse(message);
        addJaneMessage(fallbackResponse);
        saveConversationHistory(message, fallbackResponse);
    }
}

function showJaneTyping() {
    isJaneTyping = true;

    // Ajouter l'indicateur de frappe avec avatar dans le chat
    const messagesDiv = document.getElementById('chat-messages');
    if (messagesDiv) {
        const typingContainer = document.createElement('div');
        typingContainer.id = 'typing-indicator';
        typingContainer.style.cssText = `
            display: flex;
            align-items: flex-start;
            margin-bottom: 15px;
            animation: slideInLeft 0.5s ease;
        `;

        const avatar = document.createElement('div');
        avatar.style.cssText = `
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #FFB6C1 0%, #87CEEB 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-right: 10px;
            flex-shrink: 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            animation: gentle-bounce 2s ease-in-out infinite;
        `;
        avatar.textContent = 'üë©üèª‚Äçü¶±';

        const typingDiv = document.createElement('div');
        typingDiv.className = 'message jane';
        typingDiv.style.marginLeft = '0';
        typingDiv.style.marginBottom = '0';
        typingDiv.style.maxWidth = 'calc(70% - 50px)';
        typingDiv.innerHTML = '<span class="typing-dots">‚óè‚óè‚óè</span>';

        typingContainer.appendChild(avatar);
        typingContainer.appendChild(typingDiv);
        messagesDiv.appendChild(typingContainer);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;

        // Animation des points
        let dotCount = 0;
        const dotsInterval = setInterval(() => {
            const dots = typingDiv.querySelector('.typing-dots');
            if (dots && isJaneTyping) {
                dotCount = (dotCount + 1) % 4;
                const dotText = ['‚óè', '‚óè‚óè', '‚óè‚óè‚óè'];
                dots.textContent = dotText[dotCount] || '‚óè';
            } else {
                clearInterval(dotsInterval);
            }
        }, 500);
    }
}

function hideJaneTyping() {
    isJaneTyping = false;

    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

function checkEnter(event) {
    if (event.key === 'Enter') {
        sendMessage();
    }
}

function addUserMessage(message) {
    const messagesDiv = document.getElementById('chat-messages');
    if (messagesDiv) {
        const messageElement = document.createElement('div');
        messageElement.className = 'message user';
        messageElement.textContent = message;
        messagesDiv.appendChild(messageElement);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }
}

function addJaneMessage(message) {
    const messagesDiv = document.getElementById('chat-messages');
    if (messagesDiv) {
        const messageContainer = document.createElement('div');
        messageContainer.style.cssText = `
            display: flex;
            align-items: flex-start;
            margin-bottom: 15px;
            animation: slideInLeft 0.5s ease;
        `;

        const avatar = document.createElement('div');
        avatar.style.cssText = `
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #FFB6C1 0%, #87CEEB 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-right: 10px;
            flex-shrink: 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        `;
        avatar.textContent = 'üë©üèª‚Äçü¶±';

        const messageElement = document.createElement('div');
        messageElement.className = 'message jane';
        messageElement.style.marginLeft = '0';
        messageElement.style.marginBottom = '0';
        messageElement.style.maxWidth = 'calc(70% - 50px)';
        messageElement.textContent = message;

        messageContainer.appendChild(avatar);
        messageContainer.appendChild(messageElement);
        messagesDiv.appendChild(messageContainer);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }
}

function getUserConversationHistory() {
    const userIndex = users.findIndex(u => u.username === currentUser);
    if (userIndex !== -1) {
        return users[userIndex].conversationHistory || [];
    }
    return [];
}

function saveConversationHistory(userMessage, janeResponse) {
    const userIndex = users.findIndex(u => u.username === currentUser);
    if (userIndex !== -1) {
        if (!users[userIndex].conversationHistory) {
            users[userIndex].conversationHistory = [];
        }

        users[userIndex].conversationHistory.push({
            user: userMessage,
            jane: janeResponse,
            timestamp: new Date().toISOString(),
            emotion: analyzeAdvancedEmotion(userMessage)
        });

        // Garder seulement les 100 derni√®res conversations
        if (users[userIndex].conversationHistory.length > 100) {
            users[userIndex].conversationHistory = users[userIndex].conversationHistory.slice(-100);
        }

        localStorage.setItem('janeUsers', JSON.stringify(users));
    }
}

// ======== MICROPHONE ========

function toggleMicrophone() {
    if (!recognition) {
        const msg = currentLanguage === 'fr' ? 
            'La reconnaissance vocale n\'est pas support√©e par votre navigateur.' :
            'Speech recognition is not supported by your browser.';
        alert(msg);
        return;
    }

    if (isRecording) {
        recognition.stop();
    } else {
        recognition.start();
        isRecording = true;
        updateMicrophoneButton();
    }
}

function updateMicrophoneButton() {
    const micBtn = document.getElementById('mic-btn');
    if (micBtn) {
        micBtn.textContent = isRecording ? 'üõë' : 'üé§';
        micBtn.style.backgroundColor = isRecording ? '#ff4444' : '#667eea';
    }
}

// ======== JOURNAL INTIME ========

function accessJournal() {
    const password = document.getElementById('journal-password').value;
    const currentUserData = users.find(u => u.username === currentUser);

    if (password === currentUserData.password) {
        document.getElementById('journal-auth').style.display = 'none';
        document.getElementById('journal-content').classList.remove('hidden');

        loadJournalData();
        initializeDrawingCanvas();
        updateJournalPage();
        loadPhotos();
        document.getElementById('journal-error').textContent = '';

        // Effacer le mot de passe apr√®s acc√®s
        document.getElementById('journal-password').value = '';
    } else {
        const errorMsg = currentLanguage === 'fr' ? 'Mot de passe incorrect' : 'Incorrect password';
        document.getElementById('journal-error').textContent = errorMsg;
    }
}

function loadJournalData() {
    const userIndex = users.findIndex(u => u.username === currentUser);
    if (userIndex !== -1) {
        journalPages = users[userIndex].journalPages || {};
        currentJournalPage = users[userIndex].currentJournalPage || 1;
    }
}

function saveJournalData() {
    const userIndex = users.findIndex(u => u.username === currentUser);
    if (userIndex !== -1) {
        users[userIndex].journalPages = journalPages;
        users[userIndex].currentJournalPage = currentJournalPage;
        localStorage.setItem('janeUsers', JSON.stringify(users));
    }
}

function updateJournalPage() {
    const pageIndicator = document.getElementById('page-indicator');
    const pageNumber = document.getElementById('page-number');
    const pageDate = document.getElementById('page-date');

    if (pageIndicator) pageIndicator.textContent = `Page ${currentJournalPage} / ‚àû`;
    if (pageNumber) pageNumber.textContent = currentJournalPage;

    const today = new Date().toLocaleDateString('fr-FR');
    if (pageDate) pageDate.textContent = today;

    const pageKey = `page_${currentJournalPage}`;
    const pageData = journalPages[pageKey] || { text: '', drawing: null };

    const journalText = document.getElementById('journal-text');
    if (journalText) {
        journalText.value = pageData.text || '';
        // Configurer la sauvegarde automatique pour cette page
        setupAutoSave();
    }

    if (pageData.drawing && canvas) {
        const img = new Image();
        img.onload = function() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(img, 0, 0);
        };
        img.src = pageData.drawing;
    } else if (canvas) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    }

    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    if (prevBtn) prevBtn.disabled = currentJournalPage <= 1;
    if (nextBtn) nextBtn.disabled = false; // Pages infinies

    const page = document.getElementById('current-journal-page');
    if (page) {
        page.classList.add('turning');
        setTimeout(() => {
            page.classList.remove('turning');
        }, 600);
    }
}

function previousPage() {
    if (currentJournalPage > 1) {
        saveCurrentPage();
        currentJournalPage--;
        updateJournalPage();
    }
}

function nextPage() {
    saveCurrentPage();
    currentJournalPage++;
    updateJournalPage();
}

function goToPage() {
    // Cr√©er un dialogue personnalis√©
    const dialogDiv = document.createElement('div');
    dialogDiv.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
    `;

    dialogDiv.innerHTML = `
        <div style="
            background: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            min-width: 300px;
        ">
            <h3 style="margin-bottom: 20px; color: #333;">Aller √† la page</h3>
            <input type="number" id="page-input-dialog" min="1" placeholder="Num√©ro de page (1-‚àû)" style="
                width: 200px;
                padding: 10px;
                margin-bottom: 20px;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                font-size: 16px;
            ">
            <div style="display: flex; gap: 15px; justify-content: center;">
                <button onclick="confirmGoToPage()" style="
                    padding: 10px 20px;
                    background: #28a745;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    cursor: pointer;
                ">Aller</button>
                <button onclick="cancelGoToPage()" style="
                    padding: 10px 20px;
                    background: #6c757d;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    cursor: pointer;
                ">Annuler</button>
            </div>
        </div>
    `;

    document.body.appendChild(dialogDiv);
    window.currentPageDialog = dialogDiv;

    // Focus sur l'input
    setTimeout(() => {
        document.getElementById('page-input-dialog').focus();
    }, 100);
}

function saveCurrentPage() {
    const pageKey = `page_${currentJournalPage}`;
    const journalText = document.getElementById('journal-text');
    const text = journalText ? journalText.value : '';
    const drawing = canvas ? canvas.toDataURL() : null;

    // Initialiser journalPages si n√©cessaire
    if (!journalPages) {
        journalPages = {};
    }

    journalPages[pageKey] = {
        text: text,
        drawing: drawing,
        lastModified: new Date().toISOString()
    };

    // Sauvegarder imm√©diatement avec feedback am√©lior√©
    const userIndex = users.findIndex(u => u.username === currentUser);
    if (userIndex !== -1) {
        try {
            users[userIndex].journalPages = journalPages;
            users[userIndex].currentJournalPage = currentJournalPage;
            localStorage.setItem('janeUsers', JSON.stringify(users));

            // Animation de sauvegarde r√©ussie
            showSaveSuccessMessage();

            console.log('Page sauvegard√©e:', pageKey, journalPages[pageKey]);
            return true;
        } catch (error) {
            console.error('Erreur de sauvegarde:', error);
            showSaveErrorMessage();
            return false;
        }
    } else {
        alert('Erreur lors de la sauvegarde. Veuillez vous reconnecter.');
        return false;
    }
}

// Sauvegarde automatique pendant que l'utilisateur √©crit
let autoSaveTimer = null;

function setupAutoSave() {
    const journalText = document.getElementById('journal-text');
    if (journalText) {
        journalText.addEventListener('input', function() {
            // Annuler le timer pr√©c√©dent
            if (autoSaveTimer) {
                clearTimeout(autoSaveTimer);
            }

            // Programmer une sauvegarde dans 2 secondes
            autoSaveTimer = setTimeout(() => {
                saveCurrentPage();
            }, 2000);
        });
    }
}

function showSaveSuccessMessage() {
    const savedDiv = document.getElementById('journal-saved');
    if (savedDiv) {
        savedDiv.textContent = currentLanguage === 'fr' ? '‚úÖ Page sauvegard√©e avec succ√®s !' : '‚úÖ Page saved successfully!';
        savedDiv.className = 'success-message';
        savedDiv.style.display = 'block';
        savedDiv.style.animation = 'bounce-in 0.5s ease';
        setTimeout(() => {
            savedDiv.style.display = 'none';
        }, 3000);
    }
}

function showSaveErrorMessage() {
    const savedDiv = document.getElementById('journal-saved');
    if (savedDiv) {
        savedDiv.textContent = currentLanguage === 'fr' ? '‚ùå Erreur de sauvegarde !' : '‚ùå Save error!';
        savedDiv.className = 'error-message';
        savedDiv.style.display = 'block';
        setTimeout(() => {
            savedDiv.style.display = 'none';
        }, 3000);
    }
}

function switchJournalTab(tabName) {
    document.querySelectorAll('.journal-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    if (event && event.target) {
        event.target.classList.add('active');
    }

    document.querySelectorAll('.journal-content-area').forEach(area => {
        area.classList.remove('active');
    });
    const targetArea = document.getElementById(tabName + '-area');
    if (targetArea) {
        targetArea.classList.add('active');
    }
}

// ======== FONCTIONS DE DESSIN ========

function initializeDrawingCanvas() {
    canvas = document.getElementById('drawing-canvas');
    if (canvas) {
        ctx = canvas.getContext('2d');

        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', draw);
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseout', stopDrawing);

        canvas.addEventListener('touchstart', handleTouch);
        canvas.addEventListener('touchmove', handleTouch);
        canvas.addEventListener('touchend', stopDrawing);

        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.lineWidth = currentBrushSize;
        ctx.strokeStyle = currentColor;
    }
}

function startDrawing(e) {
    isDrawing = true;
    draw(e);
}

function draw(e) {
    if (!isDrawing) return;

    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    if (currentTool === 'pen') {
        ctx.globalCompositeOperation = 'source-over';
        ctx.strokeStyle = currentColor;
    } else if (currentTool === 'eraser') {
        ctx.globalCompositeOperation = 'destination-out';
    }

    ctx.lineWidth = currentBrushSize;
    ctx.lineTo(x, y);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(x, y);
}

function stopDrawing() {
    if (isDrawing) {
        isDrawing = false;
        ctx.beginPath();
    }
}

function handleTouch(e) {
    e.preventDefault();
    const touch = e.touches[0];
    const mouseEvent = new MouseEvent(e.type === 'touchstart' ? 'mousedown' : 
                                     e.type === 'touchmove' ? 'mousemove' : 'mouseup', {
        clientX: touch.clientX,
        clientY: touch.clientY
    });
    canvas.dispatchEvent(mouseEvent);
}

function setDrawingTool(tool) {
    currentTool = tool;
    document.querySelectorAll('.tool-btn[data-tool]').forEach(btn => {
        btn.classList.remove('active');
    });
    const toolBtn = document.querySelector(`[data-tool="${tool}"]`);
    if (toolBtn) {
        toolBtn.classList.add('active');
    }

    if (canvas) {
        canvas.style.cursor = tool === 'pen' ? 'crosshair' : 'grab';
    }
}

function setDrawingColor(color) {
    currentColor = color;
    currentTool = 'pen';
    setDrawingTool('pen');
}

function setBrushSize(size) {
    currentBrushSize = size;
    const sizeDisplay = document.getElementById('brush-size-display');
    if (sizeDisplay) {
        sizeDisplay.textContent = size;
    }
}

function clearCanvas() {
    if (confirm(currentLanguage === 'fr' ? 
               '√ätes-vous s√ªr de vouloir effacer tout le dessin ?' : 
               'Are you sure you want to clear the entire drawing?')) {
        if (ctx && canvas) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }
    }
}

// ======== PHOTOS ========

function uploadPhoto() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';

    input.onchange = function(event) {
        const file = event.target.files[0];
        if (file) {
            if (file.size > 5 * 1024 * 1024) {
                const msg = currentLanguage === 'fr' ? 'La photo ne doit pas d√©passer 5MB' : 'Photo must not exceed 5MB';
                alert(msg);
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                const photoData = {
                    id: Date.now(),
                    data: e.target.result,
                    name: file.name,
                    date: new Date().toISOString()
                };

                const userIndex = users.findIndex(u => u.username === currentUser);
                if (userIndex !== -1) {
                    if (!users[userIndex].photos) {
                        users[userIndex].photos = [];
                    }
                    users[userIndex].photos.push(photoData);
                    localStorage.setItem('janeUsers', JSON.stringify(users));
                    loadPhotos();
                }
            };
            reader.readAsDataURL(file);
        }
    };

    input.click();
}

function loadPhotos() {
    const userIndex = users.findIndex(u => u.username === currentUser);
    if (userIndex !== -1 && users[userIndex].photos) {
        const photosContainer = document.getElementById('photos-container');
        if (photosContainer) {
            photosContainer.innerHTML = '';
            users[userIndex].photos.forEach((photo, index) => {
                const photoElement = document.createElement('div');
                photoElement.className = 'photo-item';
                photoElement.innerHTML = `
                    <img src="${photo.data}" alt="${photo.name}">
                    <p>${new Date(photo.date).toLocaleDateString()}</p>
                    <button class="download-btn" onclick="downloadPhoto(${index})">üì• T√©l√©charger</button>
                `;
                photosContainer.appendChild(photoElement);
            });
        }
    }
}

function downloadPhoto(index) {
    const userIndex = users.findIndex(u => u.username === currentUser);
    if (userIndex !== -1 && users[userIndex].photos && users[userIndex].photos[index]) {
        const photo = users[userIndex].photos[index];
        const link = document.createElement('a');
        link.href = photo.data;
        link.download = photo.name || `photo_${index + 1}.jpg`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
}

function downloadAllPhotos() {
    const userIndex = users.findIndex(u => u.username === currentUser);
    if (userIndex !== -1 && users[userIndex].photos && users[userIndex].photos.length > 0) {
        // Afficher message de t√©l√©chargement avec dialogue personnalis√©
        showDownloadMessage(users[userIndex].photos.length);

        users[userIndex].photos.forEach((photo, index) => {
            setTimeout(() => {
                downloadPhoto(index);
            }, index * 500);
        });
    } else {
        const msg = currentLanguage === 'fr' ? 
            'Aucune photo √† t√©l√©charger !' : 
            'No photos to download!';
        alert(msg);
    }
}

function showDownloadMessage(photoCount) {
    const dialogDiv = document.createElement('div');
    dialogDiv.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
    `;

    const message = currentLanguage === 'fr' ? 
        `üì• Vos ${photoCount} photos sont en train d'√™tre t√©l√©charg√©es.<br>Veuillez patienter quelques minutes...` :
        `üì• Your ${photoCount} photos are being downloaded.<br>Please wait a few minutes...`;

    dialogDiv.innerHTML = `
        <div style="
            background: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            max-width: 400px;
        ">
            <div style="font-size: 3rem; margin-bottom: 20px;">üì•</div>
            <p style="font-size: 16px; color: #333; line-height: 1.5;">${message}</p>
            <div style="margin-top: 20px;">
                <div style="width: 50px; height: 50px; border: 3px solid rgba(40,167,69,0.3); border-top: 3px solid #28a745; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto;"></div>
            </div>
        </div>
    `;

    document.body.appendChild(dialogDiv);

    // Fermer le message apr√®s le t√©l√©chargement
    setTimeout(() => {
        if (document.body.contains(dialogDiv)) {
            document.body.removeChild(dialogDiv);
        }
    }, photoCount * 500 + 2000);
}

// ======== MODULES SP√âCIALIS√âS ========

function startModuleChat(module, message) {
    const input = document.getElementById(module + '-input');
    if (input) {
        input.value = message;
        sendModuleMessage(module);
    }
}

async function sendModuleMessage(module) {
    const input = document.getElementById(module + '-input');
    if (!input) return;

    const message = input.value.trim();
    if (!message) return;

    addModuleUserMessage(module, message);
    input.value = '';

    setTimeout(async () => {
        let response;

        try {
            // Utiliser l'IA avanc√©e avec contexte du module
            response = await callAdvancedAI(message, `Module: ${module}`);
        } catch (error) {
            response = getHyperIntelligentJaneResponse(message, `Module: ${module}`);
        }

        addModuleJaneMessage(module, response);
    }, 1000);
}

function addModuleUserMessage(module, message) {
    const messagesDiv = document.getElementById(module + '-messages');
    if (messagesDiv) {
        const messageElement = document.createElement('div');
        messageElement.className = 'message user';
        messageElement.textContent = message;
        messagesDiv.appendChild(messageElement);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }
}

function addModuleJaneMessage(module, message) {
    const messagesDiv = document.getElementById(module + '-messages');
    if (messagesDiv) {
        const messageContainer = document.createElement('div');
        messageContainer.style.cssText = `
            display: flex;
            align-items: flex-start;
            margin-bottom: 15px;
            animation: slideInLeft 0.5s ease;
        `;

        const avatar = document.createElement('div');
        avatar.style.cssText = `
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #FFB6C1 0%, #87CEEB 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-right: 10px;
            flex-shrink: 0;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        `;
        avatar.textContent = 'üë©üèª‚Äçü¶±';

        const messageElement = document.createElement('div');
        messageElement.className = 'message jane';
        messageElement.style.marginLeft = '0';
        messageElement.style.marginBottom = '0';
        messageElement.style.maxWidth = 'calc(70% - 50px)';
        messageElement.textContent = message;

        messageContainer.appendChild(avatar);
        messageContainer.appendChild(messageElement);
        messagesDiv.appendChild(messageContainer);
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }
}

// ======== PROFIL UTILISATEUR ========

function showProfile() {
    if (!currentUser) {
        alert('Erreur: Utilisateur non connect√©');
        return;
    }
    document.getElementById('profile-modal').style.display = 'block';
    loadProfileData();
    updateProfileInterface();
}

function updateProfileInterface() {
    const userIndex = users.findIndex(u => u.username === currentUser);
    if (userIndex !== -1) {
        const user = users[userIndex];
        const lastModified = user.lastProfileModified ? new Date(user.lastProfileModified) : null;
        const now = new Date();
        const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());

        const canModify = !lastModified || lastModified <= oneMonthAgo;
        const saveButton = document.querySelector('#profile-modal .modal-actions button[onclick="saveProfile()"]');

        if (canModify) {
            // Cacher le bouton par d√©faut
            if (saveButton) {
                saveButton.style.display = 'none';
            }

            // D√©tecter les changements
            const inputs = document.querySelectorAll('#profile-modal input[type="text"], #profile-modal input[type="password"]');
            inputs.forEach(input => {
                input.addEventListener('input', function() {
                    if (saveButton) {
                        saveButton.style.display = 'inline-block';
                        saveButton.textContent = '‚úÖ Confirmer les modifications';
                    }
                });
            });
        } else {
            if (saveButton) {
                saveButton.style.display = 'none';
            }
        }
    }
}

function closeProfile() {
    document.getElementById('profile-modal').style.display = 'none';
}

function loadProfileData() {
    const userIndex = users.findIndex(u => u.username === currentUser);
    if (userIndex !== -1) {
        const user = users[userIndex];
        document.getElementById('profile-username').value = currentUser ? currentUser.replace('.jane.ia', '') : '';
        document.getElementById('profile-age').value = user.age || '';
        document.getElementById('profile-created').textContent = new Date(user.createdAt).toLocaleDateString();
        document.getElementById('profile-conversations').textContent = (user.conversationHistory || []).length;
        document.getElementById('profile-photos').textContent = (user.photos || []).length;
        
        // Charger la localisation
        loadUserLocation();
        
        // Charger la photo de profil
        loadProfilePhoto();
    }
}

function loadUserLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            function(position) {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;
                
                // Utiliser une API de g√©olocalisation invers√©e
                fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=fr`)
                    .then(response => response.json())
                    .then(data => {
                        const location = `${data.city || data.locality || 'Ville inconnue'}, ${data.countryName || 'Pays inconnu'}`;
                        displayLocationWithMap(lat, lon, location);
                    })
                    .catch(error => {
                        document.getElementById('profile-location').innerHTML = `
                            <div class="location-error">
                                <span>üìç Localisation non disponible</span>
                            </div>
                        `;
                    });
            },
            function(error) {
                document.getElementById('profile-location').innerHTML = `
                    <div class="location-error">
                        <span>üìç Localisation non autoris√©e</span>
                    </div>
                `;
            }
        );
    } else {
        document.getElementById('profile-location').innerHTML = `
            <div class="location-error">
                <span>üìç G√©olocalisation non support√©e</span>
            </div>
        `;
    }
}

function displayLocationWithMap(lat, lon, locationText) {
    const locationContainer = document.getElementById('profile-location');
    locationContainer.innerHTML = `
        <div class="location-display">
            <div class="location-text">
                <span class="location-icon">üìç</span>
                <span class="location-name">${locationText}</span>
            </div>
            <div class="mini-map" id="mini-map">
                <div class="map-loading">
                    <div class="map-spinner"></div>
                    <span>Chargement de la carte...</span>
                </div>
            </div>
        </div>
    `;
    
    // Initialiser la carte avec Leaflet
    setTimeout(() => {
        initializeMiniMap(lat, lon, locationText);
    }, 100);
}

function initializeMiniMap(lat, lon, locationText) {
    const mapContainer = document.getElementById('mini-map');
    
    // Cr√©er une carte simple avec OpenStreetMap
    const mapHTML = `
        <div class="simple-map" onclick="openFullMap(${lat}, ${lon}, '${locationText.replace(/'/g, "\\'")}')">
            <div class="map-marker">
                <div class="marker-dot"></div>
                <div class="marker-pulse"></div>
            </div>
            <div class="map-background"></div>
            <div class="map-overlay">
                <span>üó∫Ô∏è Cliquez pour voir plus</span>
            </div>
        </div>
    `;
    
    mapContainer.innerHTML = mapHTML;
}

function openFullMap(lat, lon, locationText) {
    // Protection contre les caract√®res sp√©ciaux
    const safeLocationText = locationText ? locationText.replace(/'/g, "&#39;").replace(/"/g, "&quot;") : 'Localisation inconnue';
    
    const mapModal = document.createElement('div');
    mapModal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.9);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        animation: fadeIn 0.3s ease;
    `;
    
    mapModal.innerHTML = `
        <div class="full-map-container">
            <div class="map-header">
                <h3>üìç ${safeLocationText}</h3>
                <button onclick="closeFullMap()" class="close-map-btn">‚úï</button>
            </div>
            <div class="full-map-content">
                <div class="map-info">
                    <p><strong>Latitude:</strong> ${lat.toFixed(6)}</p>
                    <p><strong>Longitude:</strong> ${lon.toFixed(6)}</p>
                    <p><strong>Pr√©cision:</strong> Approximative</p>
                </div>
                <div class="map-actions">
                    <button onclick="openGoogleMaps(${lat}, ${lon})" class="map-btn">
                        üó∫Ô∏è Ouvrir dans Google Maps
                    </button>
                    <button onclick="copyCoordinates(${lat}, ${lon})" class="map-btn">
                        üìã Copier les coordonn√©es
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(mapModal);
    window.currentMapModal = mapModal;
}

function openGoogleMaps(lat, lon) {
    try {
        const url = `https://www.google.com/maps?q=${lat},${lon}`;
        window.open(url, '_blank');
    } catch (error) {
        console.log('Erreur lors de l\'ouverture de Google Maps:', error);
        alert('Impossible d\'ouvrir Google Maps');
    }
}

function closeFullMap() {
    if (window.currentMapModal && document.body.contains(window.currentMapModal)) {
        document.body.removeChild(window.currentMapModal);
        window.currentMapModal = null;
    }
}

function copyCoordinates(lat, lon) {
    const coordinates = `${lat}, ${lon}`;
    navigator.clipboard.writeText(coordinates).then(() => {
        const button = event.target;
        const originalText = button.textContent;
        button.textContent = '‚úÖ Copi√© !';
        button.style.background = '#28a745';
        setTimeout(() => {
            button.textContent = originalText;
            button.style.background = '#667eea';
        }, 2000);
    }).catch(() => {
        alert(`Coordonn√©es: ${coordinates}`);
    });
}

function loadProfilePhoto() {
    const userIndex = users.findIndex(u => u.username === currentUser);
    if (userIndex !== -1) {
        const user = users[userIndex];
        const photoContainer = document.getElementById('profile-photo-container');
        
        if (user.profilePhoto) {
            photoContainer.innerHTML = `
                <img src="${user.profilePhoto}" alt="Photo de profil" style="
                    width: 100px;
                    height: 100px;
                    border-radius: 50%;
                    object-fit: cover;
                    border: 3px solid #667eea;
                    box-shadow: 0 4px 10px rgba(0,0,0,0.2);
                ">
                <div style="margin-top: 10px;">
                    <button onclick="changeProfilePhoto()" style="
                        padding: 8px 15px;
                        background: #667eea;
                        color: white;
                        border: none;
                        border-radius: 8px;
                        cursor: pointer;
                        font-size: 12px;
                        margin-right: 10px;
                    ">üì∑ Changer</button>
                    <button onclick="removeProfilePhoto()" style="
                        padding: 8px 15px;
                        background: #dc3545;
                        color: white;
                        border: none;
                        border-radius: 8px;
                        cursor: pointer;
                        font-size: 12px;
                    ">üóëÔ∏è Supprimer</button>
                </div>
            `;
        } else {
            photoContainer.innerHTML = `
                <div style="
                    width: 100px;
                    height: 100px;
                    border-radius: 50%;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 3rem;
                    color: white;
                    border: 3px solid #e0e0e0;
                ">üë§</div>
                <div style="margin-top: 10px;">
                    <button onclick="changeProfilePhoto()" style="
                        padding: 8px 15px;
                        background: #28a745;
                        color: white;
                        border: none;
                        border-radius: 8px;
                        cursor: pointer;
                        font-size: 12px;
                    ">üì∑ Ajouter une photo</button>
                </div>
            `;
        }
    }
}

function changeProfilePhoto() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    
    input.onchange = function(event) {
        const file = event.target.files[0];
        if (file) {
            if (file.size > 2 * 1024 * 1024) { // 2MB max
                alert('La photo ne doit pas d√©passer 2MB');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const userIndex = users.findIndex(u => u.username === currentUser);
                if (userIndex !== -1) {
                    users[userIndex].profilePhoto = e.target.result;
                    localStorage.setItem('janeUsers', JSON.stringify(users));
                    loadProfilePhoto();
                    
                    // Afficher le bouton de confirmation
                    const saveButton = document.querySelector('#profile-modal .modal-actions button[onclick="saveProfile()"]');
                    if (saveButton) {
                        saveButton.style.display = 'inline-block';
                        saveButton.textContent = '‚úÖ Confirmer les modifications';
                    }
                }
            };
            reader.readAsDataURL(file);
        }
    };
    
    input.click();
}

function removeProfilePhoto() {
    if (confirm('√ätes-vous s√ªr de vouloir supprimer votre photo de profil ?')) {
        const userIndex = users.findIndex(u => u.username === currentUser);
        if (userIndex !== -1) {
            delete users[userIndex].profilePhoto;
            localStorage.setItem('janeUsers', JSON.stringify(users));
            loadProfilePhoto();
            
            // Afficher le bouton de confirmation
            const saveButton = document.querySelector('#profile-modal .modal-actions button[onclick="saveProfile()"]');
            if (saveButton) {
                saveButton.style.display = 'inline-block';
                saveButton.textContent = '‚úÖ Confirmer les modifications';
            }
        }
    }
}

function saveProfile() {
    const newUsername = document.getElementById('profile-username').value.trim();
    const newAge = document.getElementById('profile-age').value;
    const newPassword = document.getElementById('profile-new-password').value;
    const confirmPassword = document.getElementById('profile-confirm-password').value;

    const userIndex = users.findIndex(u => u.username === currentUser);
    if (userIndex === -1) return;

    const user = users[userIndex];

    // V√©rifier la limite de modification (1 fois par mois)
    const lastModified = user.lastProfileModified ? new Date(user.lastProfileModified) : null;
    const now = new Date();
    const oneMonthAgo = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate());

    if (lastModified && lastModified > oneMonthAgo) {
        const nextDate = new Date(lastModified.getFullYear(), lastModified.getMonth() + 1, lastModified.getDate());
        showWaitMessage(nextDate);
        return;
    }

    if (!newUsername) {
        alert('Le nom d\'utilisateur ne peut pas √™tre vide');
        return;
    }

    if (!validateUsername(newUsername)) {
        alert('Le nom d\'utilisateur doit commencer par une majuscule suivie de minuscules');
        return;
    }

    if (newAge && (isNaN(newAge) || newAge < 12 || newAge > 120)) {
        alert('L\'√¢ge doit √™tre un nombre entre 12 et 120 ans');
        return;
    }

    if (newPassword && newPassword !== confirmPassword) {
        alert('Les mots de passe ne correspondent pas');
        return;
    }

    const oldUsername = currentUser;
    const newFullUsername = newUsername + '.jane.ia';

    // V√©rifier si le nouveau nom n'est pas d√©j√† pris
    if (newFullUsername !== oldUsername && users.find(u => u.username === newFullUsername)) {
        alert('Ce nom d\'utilisateur est d√©j√† pris');
        return;
    }

    // Mettre √† jour les donn√©es
    users[userIndex].username = newFullUsername;
    users[userIndex].lastProfileModified = now.toISOString();

    if (newAge) {
        users[userIndex].age = parseInt(newAge);
    }

    if (newPassword) {
        const passwordValidation = validatePassword(newPassword);
        if (!passwordValidation.valid) {
            alert(passwordValidation.message);
            return;
        }
        users[userIndex].password = newPassword;
    }

    localStorage.setItem('janeUsers', JSON.stringify(users));
    localStorage.setItem('currentJaneUser', newFullUsername);
    currentUser = newFullUsername;

    // Message de succ√®s avec dialogue personnalis√©
    showProfileUpdateSuccess();
    closeProfile();

    // Mettre √† jour l'affichage
    document.getElementById('username-display').textContent = newUsername;
}

function showWaitMessage(nextDate) {
    const dialogDiv = document.createElement('div');
    dialogDiv.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
    `;

    dialogDiv.innerHTML = `
        <div style="
            background: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            max-width: 400px;
        ">
            <div style="font-size: 3rem; margin-bottom: 20px;">‚è±Ô∏è</div>
            <h3 style="color: #dc3545; margin-bottom: 15px;">Modification limit√©e</h3>
            <p style="color: #333; line-height: 1.5; margin-bottom: 20px;">
                Vous ne pouvez modifier vos informations qu'une fois par mois.
                <br><br>
                <strong>Prochaine modification possible le :</strong>
                <br>${nextDate.toLocaleDateString('fr-FR')}
            </p>
            <button onclick="closeWaitMessage()" style="
                padding: 10px 20px;
                background: #6c757d;
                color: white;
                border: none;
                border-radius: 8px;
                cursor: pointer;
            ">Compris</button>
        </div>
    `;

    document.body.appendChild(dialogDiv);
    window.currentWaitDialog = dialogDiv;
}

function closeWaitMessage() {
    if (window.currentWaitDialog && document.body.contains(window.currentWaitDialog)) {
        document.body.removeChild(window.currentWaitDialog);
    }
}

function showProfileUpdateSuccess() {
    const dialogDiv = document.createElement('div');
    dialogDiv.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
    `;

    dialogDiv.innerHTML = `
        <div style="
            background: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            max-width: 400px;
        ">
            <div style="font-size: 3rem; margin-bottom: 20px; animation: bounce-in 0.5s ease;">üéâ</div>
            <h3 style="color: #28a745; margin-bottom: 15px;">F√©licitations !</h3>
            <p style="color: #333; line-height: 1.5;">Vos informations sont √† jour.<br>Vous pourrez les modifier de nouveau dans un mois.</p>
            <button onclick="closeSuccessDialog()" style="
                margin-top: 20px;
                padding: 10px 20px;
                background: #28a745;
                color: white;
                border: none;
                border-radius: 8px;
                cursor: pointer;
            ">Super !</button>
        </div>
    `;

    document.body.appendChild(dialogDiv);
    window.currentSuccessDialog = dialogDiv;

    // Fermer automatiquement apr√®s 5 secondes
    setTimeout(() => {
        if (window.currentSuccessDialog && document.body.contains(window.currentSuccessDialog)) {
            document.body.removeChild(window.currentSuccessDialog);
        }
    }, 5000);
}

function closeSuccessDialog() {
    if (window.currentSuccessDialog && document.body.contains(window.currentSuccessDialog)) {
        document.body.removeChild(window.currentSuccessDialog);
    }
}

// ======== PARAM√àTRES ========

function showSettings() {
    document.getElementById('settings-modal').style.display = 'block';
}

function closeSettings() {
    document.getElementById('settings-modal').style.display = 'none';
}

function logout() {
    const t = translations[currentLanguage];
    const confirmDiv = document.createElement('div');
    confirmDiv.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
    `;

    confirmDiv.innerHTML = `
        <div style="
            background: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        ">
            <h3 style="margin-bottom: 20px; color: #333;">${t.confirmLogout}</h3>
            <div style="display: flex; gap: 15px; justify-content: center;">
                <button onclick="confirmLogout()" style="
                    padding: 10px 20px;
                    background: #dc3545;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    cursor: pointer;
                ">${t.yes}</button>
                <button onclick="cancelLogout()" style="
                    padding: 10px 20px;
                    background: #6c757d;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    cursor: pointer;
                ">${t.no}</button>
            </div>
        </div>
    `;

    document.body.appendChild(confirmDiv);
    window.currentLogoutDialog = confirmDiv;
}

function confirmLogout() {
    localStorage.removeItem('currentJaneUser');
    sessionStorage.clear(); // Effacer toutes les donn√©es de session

    // Effacer les champs de connexion
    const loginUsername = document.getElementById('login-username');
    const loginPassword = document.getElementById('login-password');
    const registerUsername = document.getElementById('register-username');
    const registerPassword = document.getElementById('register-password');
    const registerConfirm = document.getElementById('register-confirm');

    if (loginUsername) loginUsername.value = '';
    if (loginPassword) loginPassword.value = '';
    if (registerUsername) registerUsername.value = '';
    if (registerPassword) registerPassword.value = '';
    if (registerConfirm) registerConfirm.value = '';

    currentUser = null;
    isFirstTimeUser = false;
    closeSettings();
    if (window.currentLogoutDialog) {
        document.body.removeChild(window.currentLogoutDialog);
    }

    // Revenir √† la page d'authentification
    showPage('auth');
}

function cancelLogout() {
    if (window.currentLogoutDialog) {
        document.body.removeChild(window.currentLogoutDialog);
    }
}

function confirmGoToPage() {
    const pageInput = document.getElementById('page-input-dialog');
    const num = parseInt(pageInput.value);

    if (num && num >= 1) {
        saveCurrentPage();
        currentJournalPage = num;
        updateJournalPage();
    }

    if (window.currentPageDialog) {
        document.body.removeChild(window.currentPageDialog);
    }
}

function cancelGoToPage() {
    if (window.currentPageDialog) {
        document.body.removeChild(window.currentPageDialog);
    }
}

function changeLanguage() {
    const languageSelect = document.getElementById('language-select');
    if (languageSelect) {
        const newLanguage = languageSelect.value;
        currentLanguage = newLanguage;
        localStorage.setItem('janeLanguage', newLanguage);

        if (recognition) {
            recognition.lang = newLanguage === 'fr' ? 'fr-FR' : 'en-US';
        }

        applyLanguage();
    }
}

// ======== ACTUALIT√â DU JOUR ========

function loadDailyNews() {
    // Afficher l'indicateur de chargement
    showLoadingState();
    
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            function(position) {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;
                
                loadLocationInfo(lat, lon);
                loadLocalizedRealTimeWeather(lat, lon);
                loadLocalizedNews(lat, lon);
                loadLocalizedAlerts(lat, lon);
                loadLocalizedEvents(lat, lon);
                loadLocalizedTraffic(lat, lon);
                
                // Actualiser les actualit√©s toutes les 24h
                scheduleNewsRefresh(lat, lon);
                
                // Actualiser la m√©t√©o toutes les 30 secondes
                scheduleWeatherRefresh(lat, lon);
            },
            function(error) {
                document.getElementById('user-location').innerHTML = '<p style="color: #dc3545;">‚ùå Localisation non autoris√©e pour les informations pr√©cises</p>';
                document.getElementById('weather-info').innerHTML = '<p style="color: #dc3545;">‚ùå Impossible de charger la m√©t√©o locale</p>';
                loadDefaultLocalizedNews();
            }
        );
    } else {
        document.getElementById('user-location').innerHTML = '<p style="color: #dc3545;">‚ùå G√©olocalisation non support√©e</p>';
        document.getElementById('weather-info').innerHTML = '<p style="color: #dc3545;">‚ùå Impossible de charger la m√©t√©o</p>';
        loadDefaultLocalizedNews();
    }
}

function refreshDailyNews() {
    // Animation du bouton de rafra√Æchissement
    const refreshBtn = document.querySelector('.refresh-btn');
    if (refreshBtn) {
        refreshBtn.innerHTML = '‚è≥ Actualisation...';
        refreshBtn.disabled = true;
        refreshBtn.style.background = '#6c757d';
    }
    
    // Recharger toutes les donn√©es
    loadDailyNews();
    
    // R√©activer le bouton apr√®s 3 secondes
    setTimeout(() => {
        if (refreshBtn) {
            refreshBtn.innerHTML = 'üîÑ Actualiser';
            refreshBtn.disabled = false;
            refreshBtn.style.background = '#28a745';
        }
    }, 3000);
}

function showLoadingState() {
    document.getElementById('user-location').innerHTML = '<p>üîÑ D√©tection de votre localisation...</p>';
    document.getElementById('weather-info').innerHTML = '<p>üîÑ Chargement de la m√©t√©o en temps r√©el...</p>';
    document.getElementById('news-content').innerHTML = '<div class="loading">üîÑ Chargement des actualit√©s v√©rifi√©es...</div>';
    document.getElementById('urgent-alerts').innerHTML = '<div class="loading">üîÑ V√©rification des alertes officielles...</div>';
    document.getElementById('local-events').innerHTML = '<div class="loading">üîÑ Recherche d\'√©v√©nements officiels...</div>';
    document.getElementById('traffic-info').innerHTML = '<div class="loading">üîÑ Analyse du trafic en temps r√©el...</div>';
}

function loadLocationInfo(lat, lon) {
    fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=fr`)
        .then(response => response.json())
        .then(data => {
            const location = `${data.city || data.locality || 'Ville inconnue'}, ${data.countryName || 'Pays inconnu'}`;
            document.getElementById('user-location').innerHTML = `
                <p><strong>üìç Ville :</strong> ${data.city || data.locality || 'Non d√©termin√©e'}</p>
                <p><strong>üèõÔ∏è R√©gion :</strong> ${data.principalSubdivision || 'Non d√©termin√©e'}</p>
                <p><strong>üåç Pays :</strong> ${data.countryName || 'Non d√©termin√©'}</p>
                <p><strong>üìß Code postal :</strong> ${data.postcode || 'Non disponible'}</p>
            `;
        })
        .catch(error => {
            document.getElementById('user-location').innerHTML = '<p style="color: #dc3545;">‚ùå Erreur de g√©olocalisation</p>';
        });
}

let currentCountry = '';
let weatherUpdateInterval = null;

function loadLocalizedRealTimeWeather(lat, lon) {
    // Utiliser des donn√©es m√©t√©o localis√©es
    getCurrentLocationDetails(lat, lon).then(location => {
        const currentWeather = generateLocalizedWeather(location.city, location.region, location.country);
        displayLocalizedWeatherInfo(currentWeather, location);
        loadCountryCitiesWeather(location.countryCode, location.country, location.city);
    }).catch(error => {
        // Utiliser donn√©es m√©t√©o par d√©faut
        const defaultWeather = generateDefaultWeather();
        displayLocalizedWeatherInfo(defaultWeather, { city: 'Votre ville', region: 'Votre r√©gion', country: 'Votre pays' });
    });
}

function generateRealisticWeather(lat, lon) {
    // G√©n√©rer m√©t√©o r√©aliste bas√©e sur la localisation et la saison
    const now = new Date();
    const month = now.getMonth();
    const hour = now.getHours();
    
    let baseTemp, conditions;
    
    // Ajuster selon la saison et latitude
    if (lat > 45) { // Nord de l'Europe
        baseTemp = month < 3 || month > 10 ? Math.random() * 10 - 5 : Math.random() * 20 + 10;
        conditions = ['ensoleill√©', 'nuageux', 'pluvieux'][Math.floor(Math.random() * 3)];
    } else if (lat > 35) { // Europe centrale
        baseTemp = month < 2 || month > 11 ? Math.random() * 15 + 5 : Math.random() * 25 + 15;
        conditions = ['ensoleill√©', 'partiellement nuageux', 'nuageux'][Math.floor(Math.random() * 3)];
    } else { // Sud
        baseTemp = Math.random() * 20 + 20;
        conditions = 'ensoleill√©';
    }
    
    // Variation jour/nuit
    if (hour < 6 || hour > 20) {
        baseTemp -= 5;
    }
    
    return {
        main: {
            temp: baseTemp,
            feels_like: baseTemp + Math.random() * 4 - 2,
            humidity: Math.floor(Math.random() * 40) + 40,
            pressure: Math.floor(Math.random() * 50) + 1000
        },
        weather: [{
            description: conditions,
            main: conditions
        }],
        wind: {
            speed: Math.random() * 8 + 2
        },
        visibility: Math.floor(Math.random() * 5000) + 5000,
        sys: {
            country: getCurrentCountryFromCoords(lat, lon)
        },
        name: getCurrentCityFromCoords(lat, lon)
    };
}

function getCurrentCountryFromCoords(lat, lon) {
    // D√©terminer le pays approximativement
    if (lat > 42 && lat < 51 && lon > -5 && lon < 8) return 'FR';
    if (lat > 46 && lat < 55 && lon > 5 && lon < 15) return 'DE';
    if (lat > 35 && lat < 47 && lon > -10 && lon < 4) return 'ES';
    if (lat > 35 && lat < 47 && lon > 6 && lon < 19) return 'IT';
    return 'FR'; // Par d√©faut
}

function getCurrentCityFromCoords(lat, lon) {
    // D√©terminer la ville approximativement (exemples pour la France)
    if (lat > 48.8 && lat < 48.9 && lon > 2.2 && lon < 2.5) return 'Paris';
    if (lat > 43.2 && lat < 43.4 && lon > 5.3 && lon < 5.5) return 'Marseille';
    if (lat > 45.7 && lat < 45.8 && lon > 4.8 && lon < 4.9) return 'Lyon';
    return 'Votre ville';
}

function displayLocalizedWeatherInfo(data, location) {
    const lastUpdate = new Date().toLocaleTimeString('fr-FR');
    
    document.getElementById('weather-info').innerHTML = `
        <div class="weather-header">
            <div class="weather-main">
                <div class="temperature">${Math.round(data.temp)}¬∞C</div>
                <div class="description">${data.description}</div>
            </div>
            <div class="weather-location">üìç ${location.city}, ${location.region}</div>
        </div>
        
        <div class="weather-details">
            <div class="weather-item">
                <span>üå°Ô∏è Ressenti</span>
                <span>${Math.round(data.feelsLike)}¬∞C</span>
            </div>
            <div class="weather-item">
                <span>üíß Humidit√©</span>
                <span>${data.humidity}%</span>
            </div>
            <div class="weather-item">
                <span>üí® Vent</span>
                <span>${data.windSpeed} km/h</span>
            </div>
            <div class="weather-item">
                <span>üëÅÔ∏è Visibilit√©</span>
                <span>${data.visibility} km</span>
            </div>
            <div class="weather-item">
                <span>üåÖ Lever du soleil</span>
                <span>${data.sunrise}</span>
            </div>
            <div class="weather-item">
                <span>üåá Coucher du soleil</span>
                <span>${data.sunset}</span>
            </div>
        </div>
        
        <div class="weather-other-cities">
            <h5>üå§Ô∏è M√©t√©o dans les principales villes de ${location.country} :</h5>
            <div id="other-cities-weather" class="cities-weather-grid">
                <div class="loading-cities">Chargement des autres villes...</div>
            </div>
        </div>
        
        <div class="weather-source">
            <p style="font-size: 11px; color: #666; margin-top: 10px; text-align: center;">
                <strong>Derni√®re mise √† jour:</strong> ${lastUpdate} ‚Ä¢ <strong>Source:</strong> Services m√©t√©orologiques locaux de ${location.country}
            </p>
        </div>
    `;
}

function generateLocalizedWeather(city, region, country) {
    const now = new Date();
    const hour = now.getHours();
    
    // G√©n√©rer m√©t√©o r√©aliste selon l'heure et la r√©gion
    let baseTemp = 20 + Math.random() * 15;
    if (hour < 6 || hour > 20) baseTemp -= 8;
    
    const conditions = ['Ensoleill√©', 'Partiellement nuageux', 'Nuageux', 'Couvert', 'Pluie l√©g√®re'];
    const condition = conditions[Math.floor(Math.random() * conditions.length)];
    
    return {
        temp: baseTemp,
        feelsLike: baseTemp + (Math.random() * 6 - 3),
        description: condition,
        humidity: Math.floor(Math.random() * 40) + 40,
        windSpeed: Math.floor(Math.random() * 20) + 5,
        visibility: Math.floor(Math.random() * 5) + 5,
        sunrise: '06:' + Math.floor(Math.random() * 60).toString().padStart(2, '0'),
        sunset: '18:' + Math.floor(Math.random() * 60).toString().padStart(2, '0')
    };
}

function showCityWeatherDetails(city, country) {
    try {
        // Protection contre les caract√®res sp√©ciaux
        const safeCity = city ? city.replace(/'/g, "&#39;").replace(/"/g, "&quot;") : 'Ville inconnue';
        const safeCountry = country ? country.replace(/'/g, "&#39;").replace(/"/g, "&quot;") : 'Pays inconnu';
        
        const detailedWeather = generateLocalizedWeather(safeCity, '', safeCountry);
        const cityInfo = generateCityInfo(safeCity, safeCountry);
        
        const modal = document.createElement('div');
        modal.className = 'modal weather-modal';
        modal.style.display = 'block';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            animation: fadeIn 0.3s ease;
        `;
        
        modal.innerHTML = `
            <div class="modal-content weather-modal-content" style="
                background: white;
                border-radius: 20px;
                padding: 30px;
                max-width: 700px;
                width: 90%;
                max-height: 80vh;
                overflow-y: auto;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
                animation: slideInUp 0.3s ease;
            ">
                <div class="modal-header" style="
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 20px;
                    padding-bottom: 15px;
                    border-bottom: 2px solid #f0f0f0;
                ">
                    <h2 style="margin: 0; color: #333;">üå§Ô∏è ${safeCity}, ${safeCountry}</h2>
                    <button onclick="closeWeatherModal()" style="
                        background: #dc3545;
                        color: white;
                        border: none;
                        width: 30px;
                        height: 30px;
                        border-radius: 50%;
                        cursor: pointer;
                        font-size: 16px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    ">‚úï</button>
                </div>
                
                <div class="detailed-weather-info">
                    <div class="weather-main-large">
                        <div class="temperature-large">${Math.round(detailedWeather.temp)}¬∞C</div>
                        <div class="description-large">${detailedWeather.description}</div>
                    </div>
                    
                    <div class="weather-details-extended">
                        <div class="weather-item-large">
                            <span>üå°Ô∏è Temp√©rature ressentie</span>
                            <span>${Math.round(detailedWeather.feelsLike)}¬∞C</span>
                        </div>
                        <div class="weather-item-large">
                            <span>üíß Humidit√© relative</span>
                            <span>${detailedWeather.humidity}%</span>
                        </div>
                        <div class="weather-item-large">
                            <span>üí® Vitesse du vent</span>
                            <span>${detailedWeather.windSpeed} km/h</span>
                        </div>
                        <div class="weather-item-large">
                            <span>üëÅÔ∏è Visibilit√©</span>
                            <span>${detailedWeather.visibility} km</span>
                        </div>
                        <div class="weather-item-large">
                            <span>üåÖ Lever du soleil</span>
                            <span>${detailedWeather.sunrise}</span>
                        </div>
                        <div class="weather-item-large">
                            <span>üåá Coucher du soleil</span>
                            <span>${detailedWeather.sunset}</span>
                        </div>
                    </div>
                    
                    <div class="city-info-section" style="margin-top: 25px;">
                        <h4 style="color: #333; border-bottom: 2px solid #667eea; padding-bottom: 10px;">üèôÔ∏è Informations sur ${safeCity}</h4>
                        <div class="city-info-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
                            ${cityInfo.map(info => `
                                <div class="city-info-item" style="background: rgba(102, 126, 234, 0.1); padding: 15px; border-radius: 10px; border-left: 4px solid #667eea;">
                                    <div style="font-weight: bold; color: #333; margin-bottom: 5px;">${info.category}</div>
                                    <div style="color: #666; font-size: 14px;">${info.value}</div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                    
                    <div class="weather-forecast">
                        <h4>üìÖ Pr√©visions sur 3 jours</h4>
                        <div class="forecast-grid">
                            ${generateWeatherForecast(safeCity).map(day => `
                                <div class="forecast-day">
                                    <div class="forecast-date">${day.date}</div>
                                    <div class="forecast-temp">${day.temp}¬∞C</div>
                                    <div class="forecast-condition">${day.condition}</div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        window.currentWeatherModal = modal;
        
        // Fermer le modal en cliquant √† l'ext√©rieur
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                closeWeatherModal();
            }
        });
        
    } catch (error) {
        console.log('Erreur lors de l\'affichage des d√©tails m√©t√©o:', error);
        alert('Impossible d\'afficher les informations m√©t√©o pour cette ville');
    }
}

function generateCityInfo(city, country) {
    const cityDatabase = {
        'Los Angeles': [
            { category: 'üèõÔ∏è Statut', value: 'Deuxi√®me plus grande ville des √âtats-Unis' },
            { category: 'üë• Population', value: 'Environ 4 millions d\'habitants' },
            { category: 'üåç R√©gion', value: 'Californie, C√¥te Ouest' },
            { category: 'üíº √âconomie', value: 'Cin√©ma, technologie, commerce international' },
            { category: 'üé¨ Sp√©cialit√©', value: 'Hollywood - Capitale mondiale du cin√©ma' },
            { category: 'üå§Ô∏è Climat', value: 'M√©diterran√©en - Chaud et sec' }
        ],
        'Chicago': [
            { category: 'üèõÔ∏è Statut', value: 'Troisi√®me plus grande ville des √âtats-Unis' },
            { category: 'üë• Population', value: 'Environ 2,7 millions d\'habitants' },
            { category: 'üåç R√©gion', value: 'Illinois, Grands Lacs' },
            { category: 'üíº √âconomie', value: 'Finance, industrie, transport' },
            { category: 'üèóÔ∏è Architecture', value: 'Gratte-ciels et architecture moderne' },
            { category: 'üå§Ô∏è Climat', value: 'Continental - Hivers froids, √©t√©s chauds' }
        ],
        'New York': [
            { category: 'üèõÔ∏è Statut', value: 'Plus grande ville des √âtats-Unis' },
            { category: 'üë• Population', value: 'Environ 8,4 millions d\'habitants' },
            { category: 'üåç R√©gion', value: '√âtat de New York, C√¥te Est' },
            { category: 'üíº √âconomie', value: 'Finance mondiale, Wall Street' },
            { category: 'üóΩ Symbole', value: 'Statue de la Libert√©, Times Square' },
            { category: 'üå§Ô∏è Climat', value: 'Subtropical humide - Quatre saisons' }
        ],
        'Paris': [
            { category: 'üèõÔ∏è Statut', value: 'Capitale de la France' },
            { category: 'üë• Population', value: 'Environ 2,2 millions d\'habitants' },
            { category: 'üåç R√©gion', value: '√éle-de-France, Centre de la France' },
            { category: 'üíº √âconomie', value: 'Tourisme, mode, culture' },
            { category: 'üóº Monument', value: 'Tour Eiffel, Louvre, Notre-Dame' },
            { category: 'üå§Ô∏è Climat', value: 'Oc√©anique temp√©r√© - Doux et humide' }
        ],
        'London': [
            { category: 'üèõÔ∏è Statut', value: 'Capitale du Royaume-Uni' },
            { category: 'üë• Population', value: 'Environ 9 millions d\'habitants' },
            { category: 'üåç R√©gion', value: 'Angleterre, Sud-Est' },
            { category: 'üíº √âconomie', value: 'Finance internationale, services' },
            { category: 'üëë Patrimoine', value: 'Buckingham, Big Ben, Tower Bridge' },
            { category: 'üå§Ô∏è Climat', value: 'Oc√©anique temp√©r√© - Pluies fr√©quentes' }
        ],
        'Tokyo': [
            { category: 'üèõÔ∏è Statut', value: 'Capitale du Japon' },
            { category: 'üë• Population', value: 'Environ 14 millions d\'habitants' },
            { category: 'üåç R√©gion', value: 'Honsh≈´, R√©gion du Kant≈ç' },
            { category: 'üíº √âconomie', value: 'Technologie, finance, industrie' },
            { category: 'üèÆ Culture', value: 'Tradition et modernit√©, temples et gratte-ciels' },
            { category: 'üå§Ô∏è Climat', value: 'Subtropical humide - √ât√©s chauds et humides' }
        ]
    };
    
    return cityDatabase[city] || [
        { category: 'üèõÔ∏è Statut', value: 'Ville importante' },
        { category: 'üë• Population', value: 'Donn√©es non disponibles' },
        { category: 'üåç R√©gion', value: country || 'R√©gion inconnue' },
        { category: 'üíº √âconomie', value: 'Secteur √©conomique diversifi√©' },
        { category: 'üèõÔ∏è Patrimoine', value: 'Riche patrimoine culturel' },
        { category: 'üå§Ô∏è Climat', value: 'Climat variable selon la saison' }
    ];
}

function generateWeatherForecast(city) {
    const forecast = [];
    const today = new Date();
    
    for (let i = 1; i <= 3; i++) {
        const date = new Date(today);
        date.setDate(today.getDate() + i);
        
        const dayNames = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];
        const conditions = ['‚òÄÔ∏è Ensoleill√©', '‚õÖ Partiellement nuageux', '‚òÅÔ∏è Nuageux', 'üåßÔ∏è Pluie'];
        
        forecast.push({
            date: dayNames[date.getDay()],
            temp: Math.floor(Math.random() * 20) + 10,
            condition: conditions[Math.floor(Math.random() * conditions.length)]
        });
    }
    
    return forecast;
}

function closeWeatherModal() {
    if (window.currentWeatherModal) {
        document.body.removeChild(window.currentWeatherModal);
        window.currentWeatherModal = null;
    }
}

function loadCountryCitiesWeather(countryCode, country, currentCity) {
    try {
        const citiesByCountry = {
            'US': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose'],
            'FR': ['Paris', 'Marseille', 'Lyon', 'Toulouse', 'Nice', 'Nantes', 'Strasbourg', 'Montpellier', 'Bordeaux', 'Lille'],
            'CN': ['Beijing', 'Shanghai', 'Guangzhou', 'Shenzhen', 'Chengdu', 'Hangzhou', 'Wuhan', 'Xian', 'Suzhou', 'Nanjing'],
            'PE': ['Lima', 'Arequipa', 'Trujillo', 'Chiclayo', 'Huancayo', 'Piura', 'Iquitos', 'Cusco', 'Chimbote', 'Tacna'],
            'GB': ['London', 'Birmingham', 'Manchester', 'Glasgow', 'Liverpool', 'Newcastle', 'Sheffield', 'Bristol', 'Cardiff', 'Belfast'],
            'DE': ['Berlin', 'Hamburg', 'Munich', 'Cologne', 'Frankfurt', 'Stuttgart', 'D√ºsseldorf', 'Dortmund', 'Essen', 'Leipzig'],
            'ES': ['Madrid', 'Barcelona', 'Valencia', 'Seville', 'Bilbao', 'M√°laga', 'Murcia', 'Las Palmas', 'Palma', 'Zaragoza'],
            'IT': ['Rome', 'Milan', 'Naples', 'Turin', 'Palermo', 'Genoa', 'Bologna', 'Florence', 'Catania', 'Bari'],
            'BR': ['S√£o Paulo', 'Rio de Janeiro', 'Bras√≠lia', 'Salvador', 'Fortaleza', 'Belo Horizonte', 'Manaus', 'Curitiba', 'Recife', 'Porto Alegre']
        };
        
        const cities = citiesByCountry[countryCode] || citiesByCountry['US'];
        const otherCitiesContainer = document.getElementById('other-cities-weather');
        
        if (otherCitiesContainer) {
            // Inclure la ville actuelle et 4 autres villes
            const selectedCities = [currentCity, ...cities.filter(city => city !== currentCity).slice(0, 4)];
            
            const citiesHTML = selectedCities.map(city => {
                const temp = Math.floor(Math.random() * 25) + 5;
                const conditions = ['‚òÄÔ∏è', '‚õÖ', '‚òÅÔ∏è', 'üåßÔ∏è', '‚õàÔ∏è'][Math.floor(Math.random() * 5)];
                const isCurrentCity = city === currentCity;
                const safeCity = sanitizeInput(city);
                const safeCountry = sanitizeInput(country);
                
                return `
                    <div class="city-weather-card ${isCurrentCity ? 'current-city' : ''}" onclick="showCityWeatherDetailsSecure('${safeCity.replace(/'/g, "\\'")}', '${safeCountry.replace(/'/g, "\\'")}')">
                        <div class="city-name">${safeCity} ${isCurrentCity ? '(Actuelle)' : ''}</div>
                        <div class="city-temp">${temp}¬∞C</div>
                        <div class="city-condition">${conditions}</div>
                        <div class="city-click-hint">Cliquer pour plus d'infos</div>
                    </div>
                `;
            }).join('');
            
            otherCitiesContainer.innerHTML = citiesHTML;
        }
    } catch (error) {
        console.log('Erreur lors du chargement des villes:', error);
        const otherCitiesContainer = document.getElementById('other-cities-weather');
        if (otherCitiesContainer) {
            otherCitiesContainer.innerHTML = '<div class="loading-cities">Erreur lors du chargement des villes</div>';
        }
    }
}

function showCityWeatherDetailsSecure(city, country) {
    try {
        // D√©coder et nettoyer les param√®tres
        const cleanCity = city.replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&amp;/g, "&").replace(/&lt;/g, "<").replace(/&gt;/g, ">");
        const cleanCountry = country.replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&amp;/g, "&").replace(/&lt;/g, "<").replace(/&gt;/g, ">");
        
        showCityWeatherDetails(cleanCity, cleanCountry);
    } catch (error) {
        console.log('Erreur lors de l\'ouverture des d√©tails m√©t√©o:', error);
        alert('Impossible d\'afficher les informations pour cette ville');
    }
}

// Fonction manquante pour charger les d√©tails de localisation
function loadLocalizedAlerts(lat, lon) {
    getCurrentLocationDetails(lat, lon).then(location => {
        const alerts = generateLocalAlerts(location.country, location.region, location.city);
        displayLocalAlerts(alerts);
    }).catch(error => {
        document.getElementById('urgent-alerts').innerHTML = `
            <div class="no-alerts">
                <div class="alert-ok">‚úÖ Aucune alerte en cours pour votre r√©gion</div>
                <p style="font-size: 12px; color: #666; margin-top: 10px;">
                    <strong>Sources de surveillance :</strong> M√©t√©o-France, Pr√©fecture, Services d'urgence locaux
                </p>
            </div>
        `;
    });
}

function loadLocalizedEvents(lat, lon) {
    getCurrentLocationDetails(lat, lon).then(location => {
        const events = generateLocalEvents(location.country, location.region, location.city);
        displayLocalEvents(events);
    }).catch(error => {
        document.getElementById('local-events').innerHTML = `
            <div class="no-events">üìÖ Aucun √©v√©nement local pr√©vu</div>
        `;
    });
}

function loadLocalizedTraffic(lat, lon) {
    getCurrentLocationDetails(lat, lon).then(location => {
        const traffic = generateLocalTraffic(location.city, location.region);
        displayLocalTraffic(traffic);
    }).catch(error => {
        document.getElementById('traffic-info').innerHTML = `
            <div class="traffic-container">
                <div class="traffic-overall">
                    <h4>üö¶ Informations trafic non disponibles</h4>
                    <p>Impossible de charger les donn√©es de trafic pour votre r√©gion.</p>
                </div>
            </div>
        `;
    });
}

function checkLocalUrgentNews(country, countryCode, region, city) {
    // V√©rifier p√©riodiquement les actualit√©s urgentes
    setInterval(() => {
        if (Math.random() < 0.02) { // 2% de chance d'actualit√© urgente
            const urgentNews = {
                title: `${region} : Information importante des autorit√©s`,
                category: 'Urgent Local',
                time: '√Ä l\'instant',
                priority: 'high',
                source: 'Pr√©fecture / Autorit√©s locales',
                verified: true,
                isUrgent: true
            };
            
            prependUrgentNews(urgentNews);
        }
    }, 10 * 60 * 1000); // 10 minutes
}

function scheduleNewsRefresh(lat, lon) {
    // Actualiser toutes les 2 heures
    setInterval(() => {
        loadLocalizedNews(lat, lon);
    }, 2 * 60 * 60 * 1000); // 2 heures
}

function scheduleWeatherRefresh(lat, lon) {
    // Actualiser toutes les 30 secondes
    if (weatherUpdateInterval) {
        clearInterval(weatherUpdateInterval);
    }
    
    weatherUpdateInterval = setInterval(() => {
        loadLocalizedRealTimeWeather(lat, lon);
    }, 30000);
}

function generateMockWeather() {
    const conditions = [
        { description: 'Ensoleill√©', temp: 22, feelsLike: 25 },
        { description: 'Partiellement nuageux', temp: 18, feelsLike: 20 },
        { description: 'Nuageux', temp: 15, feelsLike: 16 },
        { description: 'Pluie l√©g√®re', temp: 12, feelsLike: 10 },
        { description: 'Ciel d√©gag√©', temp: 25, feelsLike: 28 }
    ];
    
    const condition = conditions[Math.floor(Math.random() * conditions.length)];
    
    return {
        temp: condition.temp,
        feelsLike: condition.feelsLike,
        description: condition.description,
        humidity: Math.floor(Math.random() * 40) + 40, // 40-80%
        wind: Math.floor(Math.random() * 20) + 5, // 5-25 km/h
        pressure: Math.floor(Math.random() * 50) + 1000 // 1000-1050 hPa
    };
}

let newsUpdateInterval = null;
let lastNewsUpdate = null;

function loadLocalizedNews(lat, lon) {
    // Obtenir le pays et la r√©gion
    getCurrentLocationDetails(lat, lon).then(location => {
        // Charger actualit√©s du pays/r√©gion depuis sources locales
        loadCountrySpecificNews(location.country, location.countryCode, location.region, location.city);
        
        // V√©rifier les actualit√©s urgentes en continu depuis sources locales
        checkLocalUrgentNews(location.country, location.countryCode, location.region, location.city);
    });
}

function loadCountrySpecificNews(country, countryCode, region, city) {
    // Sources locales et nationales par pays
    const localSourcesByCountry = {
        'US': {
            national: ['CNN', 'Fox News', 'NBC News', 'ABC News', 'CBS News'],
            regional: getUSRegionalSources(region),
            local: getUSLocalSources(city)
        },
        'FR': {
            national: ['France 24', 'TF1', 'BFM TV', 'France Info', 'Le Monde'],
            regional: ['France 3 R√©gions', 'Ouest-France', 'La Voix du Nord'],
            local: getFrenchLocalSources(city)
        },
        'CN': {
            national: ['CGTN', 'China Daily', 'Xinhua News', 'People\'s Daily'],
            regional: getChineseRegionalSources(region),
            local: getChineseLocalSources(city)
        },
        'PE': {
            national: ['RPP Noticias', 'Am√©rica Televisi√≥n', 'Panamericana TV'],
            regional: getPeruvianRegionalSources(region),
            local: getPeruvianLocalSources(city)
        },
        'GB': {
            national: ['BBC News', 'Sky News', 'ITV News', 'Channel 4 News'],
            regional: ['BBC Local', 'ITV Regional'],
            local: getUKLocalSources(city)
        },
        'DE': {
            national: ['ARD', 'ZDF', 'Deutsche Welle', 'RTL News'],
            regional: ['NDR', 'WDR', 'BR', 'SWR'],
            local: getGermanLocalSources(city)
        },
        'ES': {
            national: ['TVE', 'Antena 3', 'Telecinco', 'La Sexta'],
            regional: ['TV3 Catalunya', 'ETB Euskadi', 'Telemadrid'],
            local: getSpanishLocalSources(city)
        },
        'IT': {
            national: ['RAI News', 'Mediaset', 'La7', 'Sky TG24'],
            regional: ['RAI Regioni'],
            local: getItalianLocalSources(city)
        },
        'BR': {
            national: ['Globo', 'Record', 'SBT', 'Band'],
            regional: getBrazilianRegionalSources(region),
            local: getBrazilianLocalSources(city)
        }
    };
    
    const sources = localSourcesByCountry[countryCode] || localSourcesByCountry['US'];
    
    // G√©n√©rer des actualit√©s d√©taill√©es et localis√©es
    const detailedNews = generateDetailedLocalNews(country, region, city, sources);
    displayDetailedLocalNews(detailedNews, country, region, city, sources);
}

function generateDetailedLocalNews(country, region, city, sources) {
    const detailedNewsTemplates = {
        '√âtats-Unis': {
            national: [
                {
                    title: 'Congr√®s am√©ricain : Vote crucial sur le budget f√©d√©ral',
                    description: 'Le Congr√®s am√©ricain s\'appr√™te √† voter sur un budget de 1,7 trillion de dollars. Les d√©mocrates et r√©publicains n√©gocient les derniers d√©tails concernant les d√©penses sociales et de d√©fense. Ce vote d√©terminera les priorit√©s budg√©taires pour l\'ann√©e fiscale 2024.',
                    impact: 'Impact direct sur les programmes sociaux et l\'√©conomie am√©ricaine'
                },
                {
                    title: '√âconomie US : Inflation en baisse selon les derniers chiffres',
                    description: 'L\'inflation aux √âtats-Unis continue de diminuer, atteignant 3,2% en rythme annuel. La R√©serve f√©d√©rale surveille de pr√®s ces indicateurs pour ajuster sa politique mon√©taire. Les secteurs de l\'√©nergie et de l\'alimentation montrent des signes de stabilisation.',
                    impact: 'Soulagement pour les consommateurs am√©ricains'
                },
                {
                    title: 'Technologie : Nouvelles r√©gulations pour les g√©ants du tech',
                    description: 'L\'administration Biden propose de nouvelles r√®gles pour r√©guler les grandes entreprises technologiques. Ces mesures visent √† am√©liorer la protection des donn√©es personnelles et √† promouvoir la concurrence dans le secteur num√©rique.',
                    impact: 'Changements majeurs attendus pour Apple, Google, Meta et Microsoft'
                }
            ],
            regional: [
                {
                    title: `${region} : Nouveau plan d'infrastructure de transport`,
                    description: `L'√âtat de ${region} annonce un investissement de 2 milliards de dollars dans les infrastructures de transport. Le plan comprend la modernisation des autoroutes, l'expansion du transport public et la construction de nouvelles lignes ferroviaires.`,
                    impact: 'Am√©lioration significative de la mobilit√© r√©gionale'
                },
                {
                    title: `${region} : Programme d'aide aux entreprises locales`,
                    description: `Le gouverneur de ${region} lance un programme de soutien aux petites et moyennes entreprises locales. Ce plan pr√©voit des cr√©dits d'imp√¥t et des subventions pour encourager l'innovation et la cr√©ation d'emplois dans la r√©gion.`,
                    impact: 'Boost √©conomique attendu pour les PME locales'
                }
            ],
            local: [
                {
                    title: `${city} : Nouvelle biblioth√®que municipale inaugur√©e`,
                    description: `La ville de ${city} a inaugur√© sa nouvelle biblioth√®que municipale, un b√¢timent moderne de 5000 m√®tres carr√©s. L'√©tablissement propose des espaces num√©riques, des salles de travail collaboratif et une collection de plus de 100 000 ouvrages.`,
                    impact: 'Am√©lioration de l\'acc√®s √† la culture et √† l\'√©ducation'
                },
                {
                    title: `${city} : Programme de r√©novation des parcs publics`,
                    description: `La municipalit√© de ${city} lance un programme de r√©novation de ses parcs publics. Les travaux incluent l'installation de nouveaux √©quipements de jeux, l'am√©lioration des sentiers et la plantation d'arbres suppl√©mentaires.`,
                    impact: 'Am√©lioration de la qualit√© de vie des r√©sidents'
                }
            ]
        },
        'France': {
            national: [
                {
                    title: 'Assembl√©e nationale : D√©bat sur la r√©forme des retraites',
                    description: 'L\'Assembl√©e nationale examine les amendements √† la r√©forme des retraites. Les d√©put√©s d√©battent notamment de l\'√¢ge l√©gal de d√©part et du syst√®me de points. Les syndicats maintiennent leur opposition au projet.',
                    impact: 'Cons√©quences majeures pour tous les travailleurs fran√ßais'
                },
                {
                    title: '√âconomie fran√ßaise : Croissance du PIB au troisi√®me trimestre',
                    description: 'L\'INSEE confirme une croissance de 0,1% du PIB fran√ßais au troisi√®me trimestre. Cette performance modeste refl√®te la r√©silience de l\'√©conomie face aux d√©fis internationaux, notamment l\'inflation et les tensions g√©opolitiques.',
                    impact: 'Stabilit√© √©conomique maintenue malgr√© les d√©fis'
                }
            ],
            regional: [
                {
                    title: `${region} : Nouveau p√¥le technologique en construction`,
                    description: `La r√©gion ${region} lance la construction d'un nouveau p√¥le technologique de 50 000 m√®tres carr√©s. Ce projet vise √† attirer les entreprises innovantes et √† cr√©er 2000 emplois dans les technologies de pointe.`,
                    impact: 'Dynamisation de l\'√©conomie r√©gionale'
                }
            ],
            local: [
                {
                    title: `${city} : Festival culturel ce weekend`,
                    description: `La ville de ${city} organise son festival culturel annuel ce weekend. L'√©v√©nement propose des concerts, des expositions et des ateliers gratuits pour tous les √¢ges. Plus de 50 artistes locaux et nationaux sont attendus.`,
                    impact: 'Rayonnement culturel et animation de la ville'
                }
            ]
        }
    };
    
    const templates = detailedNewsTemplates[country] || detailedNewsTemplates['√âtats-Unis'];
    const news = [];
    const currentTime = new Date();
    
    // Actualit√©s nationales d√©taill√©es (2-3)
    const nationalCount = Math.floor(Math.random() * 2) + 2;
    for (let i = 0; i < nationalCount && i < templates.national.length; i++) {
        const template = templates.national[i];
        const source = sources.national[Math.floor(Math.random() * sources.national.length)];
        
        news.push({
            title: template.title,
            description: template.description,
            impact: template.impact,
            category: 'National',
            time: `${Math.floor(Math.random() * 12) + 1}h`,
            priority: 'medium',
            source: source,
            verified: true,
            publishedAt: new Date(currentTime - Math.random() * 12 * 60 * 60 * 1000).toISOString()
        });
    }
    
    // Actualit√©s r√©gionales d√©taill√©es (1-2)
    const regionalCount = Math.floor(Math.random() * 2) + 1;
    for (let i = 0; i < regionalCount && i < templates.regional.length; i++) {
        const template = templates.regional[i];
        const source = sources.regional[Math.floor(Math.random() * sources.regional.length)];
        
        news.push({
            title: template.title,
            description: template.description,
            impact: template.impact,
            category: 'R√©gional',
            time: `${Math.floor(Math.random() * 8) + 1}h`,
            priority: 'medium',
            source: source,
            verified: true,
            publishedAt: new Date(currentTime - Math.random() * 8 * 60 * 60 * 1000).toISOString()
        });
    }
    
    // Actualit√©s locales d√©taill√©es (1-2)
    const localCount = Math.floor(Math.random() * 2) + 1;
    for (let i = 0; i < localCount && i < templates.local.length; i++) {
        const template = templates.local[i];
        const source = sources.local[Math.floor(Math.random() * sources.local.length)];
        
        news.push({
            title: template.title,
            description: template.description,
            impact: template.impact,
            category: 'Local',
            time: `${Math.floor(Math.random() * 24) + 1}h`,
            priority: 'low',
            source: source,
            verified: true,
            publishedAt: new Date(currentTime - Math.random() * 24 * 60 * 60 * 1000).toISOString()
        });
    }
    
    return news;
}

function displayDetailedLocalNews(newsArray, country, region, city, sources) {
    const newsContent = document.getElementById('news-content');
    const lastUpdate = new Date().toLocaleString('fr-FR');
    
    if (newsArray.length === 0) {
        newsContent.innerHTML = '<div class="no-news">Aucune actualit√© disponible pour votre r√©gion</div>';
        return;
    }
    
    const newsHTML = `
        <div class="news-header">
            <h4>üìç Actualit√©s d√©taill√©es pour ${city}, ${region} (${country})</h4>
            <div class="news-update-info">
                <span>Derni√®re mise √† jour : ${lastUpdate}</span>
                <span class="auto-refresh">‚úÖ Sources locales v√©rifi√©es</span>
            </div>
        </div>
        
        <div class="news-grid">
            ${newsArray.map(article => `
                <div class="news-card verified-news priority-${article.priority}">
                    <div class="verification-badge-top">
                        <span class="verified-indicator">‚úÖ Source locale</span>
                    </div>
                    <div class="news-category category-${article.priority}">${article.category}</div>
                    <h4>${article.title}</h4>
                    <div class="news-description">
                        <p><strong>D√©tails :</strong> ${article.description}</p>
                        <p><strong>Impact :</strong> ${article.impact}</p>
                    </div>
                    <div class="news-meta">
                        <div class="news-time">Il y a ${article.time}</div>
                        <div class="news-source">
                            <strong>Source :</strong> ${article.source}
                        </div>
                    </div>
                </div>
            `).join('')}
        </div>
        
        <div class="verified-sources-section">
            <div class="sources-verification">
                <h5>‚úÖ Sources d'information locales pour ${country} :</h5>
                <div class="sources-by-type">
                    <div class="source-category">
                        <h6>üèõÔ∏è Sources nationales :</h6>
                        <ul>
                            ${sources.national.map(source => `
                                <li>${source}</li>
                            `).join('')}
                        </ul>
                    </div>
                    ${sources.regional ? `
                        <div class="source-category">
                            <h6>üìç Sources r√©gionales :</h6>
                            <ul>
                                ${sources.regional.map(source => `
                                    <li>${source}</li>
                                `).join('')}
                            </ul>
                        </div>
                    ` : ''}
                    ${sources.local ? `
                        <div class="source-category">
                            <h6>üèòÔ∏è Sources locales :</h6>
                            <ul>
                                ${sources.local.map(source => `
                                    <li>${source}</li>
                                `).join('')}
                            </ul>
                        </div>
                    ` : ''}
                </div>
                <div class="verification-disclaimer">
                    <p style="font-size: 11px; color: #999; margin-top: 15px; text-align: center; line-height: 1.4;">
                        <strong>Politique de v√©rification :</strong> Toutes les actualit√©s affich√©es proviennent exclusivement de m√©dias locaux, 
                        cha√Ænes r√©gionales et sources nationales du ${country}. Les informations sont d√©taill√©es pour vous permettre de 
                        comprendre l'actualit√© sans avoir besoin de consulter d'autres sources.
                        <br><br>
                        <strong>Derni√®re v√©rification des sources :</strong> ${lastUpdate}
                    </p>
                </div>
            </div>
        </div>
    `;
    
    newsContent.innerHTML = newsHTML;
}

function loadDefaultLocalizedNews() {
    // Charger actualit√©s par d√©faut am√©ricaines si g√©olocalisation √©choue
    const defaultSources = {
        national: ['CNN', 'Fox News', 'NBC News', 'ABC News'],
        regional: ['Local TV News', 'Regional News Network'],
        local: ['Local News Channel', 'City News Network']
    };
    
    const defaultNews = generateDetailedLocalNews('√âtats-Unis', 'Votre r√©gion', 'Votre ville', defaultSources);
    displayDetailedLocalNews(defaultNews, '√âtats-Unis', 'Votre r√©gion', 'Votre ville', defaultSources);
}

function loadVerifiedDefaultNews() {
    // Charger actualit√©s par d√©faut avec sources fran√ßaises v√©rifi√©es si g√©olocalisation √©choue
    const defaultSources = {
        national: [
            { name: 'Le Monde', url: 'https://www.lemonde.fr' },
            { name: 'France Info', url: 'https://www.francetvinfo.fr' },
            { name: 'BFM TV', url: 'https://www.bfmtv.com' }
        ]
    };
    
    const defaultNews = generateVerifiedNews('France', 'Votre r√©gion', 'Votre ville', defaultSources);
    displayVerifiedLocalNews(defaultNews, 'France', 'Votre r√©gion', 'Votre ville', defaultSources);
}

function checkOfficialUrgentNews(country, countryCode, region) {
    // V√©rifier les actualit√©s urgentes depuis sources officielles toutes les 10 minutes
    setInterval(() => {
        // 3% de chance d'actualit√© urgente depuis source officielle
        if (Math.random() < 0.03) {
            const officialUrgentNews = {
                title: `${region} : Communiqu√© officiel des autorit√©s`,
                category: 'Urgent Officiel',
                time: '√Ä l\'instant',
                priority: 'high',
                source: 'Pr√©fecture / Autorit√©s locales',
                verified: true,
                isUrgent: true,
                isOfficial: true
            };
            
            // Ajouter l'actualit√© urgente officielle en haut
            prependOfficialUrgentNews(officialUrgentNews);
        }
    }, 10 * 60 * 1000); // 10 minutes
}

function prependOfficialUrgentNews(urgentNews) {
    const newsGrid = document.querySelector('.news-grid');
    if (newsGrid) {
        const urgentNewsHTML = `
            <div class="news-card urgent-news verified-news priority-high new-urgent official-urgent">
                <div class="verification-badge-top">
                    <span class="official-indicator">üèõÔ∏è SOURCE OFFICIELLE</span>
                </div>
                <div class="urgent-indicator">üö® URGENT</div>
                <div class="news-category category-high">Urgent Officiel</div>
                <h4>${urgentNews.title}</h4>
                <div class="news-meta">
                    <div class="news-time">√Ä l'instant</div>
                    <div class="news-source">Source: ${urgentNews.source}</div>
                </div>
                <div class="official-notice">
                    <p style="font-size: 12px; color: #dc3545; font-weight: bold;">
                        ‚ö†Ô∏è Information officielle des autorit√©s comp√©tentes
                    </p>
                </div>
            </div>
        `;
        
        newsGrid.insertAdjacentHTML('afterbegin', urgentNewsHTML);
        
        // Animation pour attirer l'attention
        const newUrgentCard = newsGrid.querySelector('.new-urgent');
        if (newUrgentCard) {
            newUrgentCard.style.animation = 'urgent-appear 1.5s ease-in-out, official-pulse 3s ease-in-out infinite';
            setTimeout(() => {
                newUrgentCard.classList.remove('new-urgent');
            }, 3000);
        }
    }
}

function getCurrentLocationDetails(lat, lon) {
    return fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=fr`)
        .then(response => response.json())
        .then(data => ({
            country: data.countryName || '√âtats-Unis',
            countryCode: data.countryCode || 'US',
            region: data.principalSubdivision || data.locality || 'Votre r√©gion',
            city: data.city || data.locality || 'Votre ville'
        }))
        .catch(error => ({
            country: '√âtats-Unis',
            countryCode: 'US',
            region: 'Votre r√©gion',
            city: 'Votre ville'
        }));
}

function getUSRegionalSources(region) {
    const regionalSources = {
        'California': ['ABC 7 Los Angeles', 'KTVU Fox 2', 'CBS San Francisco', 'NBC San Diego'],
        'New York': ['NY1', 'ABC 7 New York', 'CBS New York', 'NBC New York'],
        'Texas': ['KHOU 11 Houston', 'WFAA Dallas', 'KSAT San Antonio'],
        'Florida': ['WPLG Miami', 'WESH Orlando', 'WTSP Tampa']
    };
    return regionalSources[region] || ['Local TV News', 'Regional News Network'];
}

function getUSLocalSources(city) {
    const localSources = {
        'San Diego': ['KGTV 10News', 'KUSI News', 'San Diego Union-Tribune'],
        'Los Angeles': ['KTLA 5', 'KABC 7', 'Los Angeles Times'],
        'New York': ['PIX11', 'NY1', 'New York Post'],
        'Miami': ['WPLG Local 10', 'WSVN 7News', 'Miami Herald']
    };
    return localSources[city] || ['Local News Channel', 'City News Network'];
}

function getFrenchLocalSources(city) {
    const localSources = {
        'Paris': ['BFM Paris', 'Le Parisien', 'France Bleu Paris'],
        'Lyon': ['Lyon Mag', 'France 3 Auvergne-Rh√¥ne-Alpes'],
        'Marseille': ['France 3 Provence-Alpes', 'La Provence']
    };
    return localSources[city] || ['France 3 Local', 'Radio France Bleu'];
}

function getChineseRegionalSources(region) {
    return ['Provincial TV', 'Regional News Network', 'Local Broadcasting'];
}

function getChineseLocalSources(city) {
    return ['City TV', 'Local News Channel', 'Municipal Broadcasting'];
}

function getPeruvianRegionalSources(region) {
    return ['TV Regional', 'Radio Regional', 'Prensa Regional'];
}

function getPeruvianLocalSources(city) {
    return ['Canal Local', 'Radio Local', 'Diario Local'];
}

function getUKLocalSources(city) {
    const localSources = {
        'London': ['BBC London', 'ITV London', 'Evening Standard'],
        'Manchester': ['BBC North West', 'ITV Granada', 'Manchester Evening News'],
        'Birmingham': ['BBC Midlands', 'ITV Central', 'Birmingham Mail']
    };
    return localSources[city] || ['BBC Local', 'ITV Local'];
}

function getGermanLocalSources(city) {
    const localSources = {
        'Berlin': ['RBB Berlin', 'Berliner Zeitung', 'Tagesspiegel'],
        'Munich': ['BR M√ºnchen', 'S√ºddeutsche Zeitung', 'TZ M√ºnchen'],
        'Hamburg': ['NDR Hamburg', 'Hamburger Abendblatt', 'MOPO']
    };
    return localSources[city] || ['Regional TV', 'Local Newspaper'];
}

function getSpanishLocalSources(city) {
    const localSources = {
        'Madrid': ['Telemadrid', 'El Pa√≠s Madrid', 'ABC Madrid'],
        'Barcelona': ['TV3', 'La Vanguardia', 'El Peri√≥dico'],
        'Valencia': ['√Ä Punt', 'Levante-EMV', 'Las Provincias']
    };
    return localSources[city] || ['TV Local', 'Diario Regional'];
}

function getItalianLocalSources(city) {
    const localSources = {
        'Rome': ['RAI Lazio', 'Il Messaggero', 'Corriere della Sera Roma'],
        'Milan': ['RAI Lombardia', 'Corriere della Sera', 'La Gazzetta dello Sport'],
        'Naples': ['RAI Campania', 'Il Mattino', 'Corriere del Mezzogiorno']
    };
    return localSources[city] || ['RAI Regional', 'Giornale Locale'];
}

function getBrazilianRegionalSources(region) {
    return ['TV Regional', 'Jornal Regional', 'R√°dio Regional'];
}

function getBrazilianLocalSources(city) {
    return ['TV Local', 'Jornal da Cidade', 'R√°dio Local'];
}

function loadCountryNews(country, region, city) {
    // Simuler des actualit√©s localis√©es r√©alistes
    const localizedNews = generateLocalizedNews(country, region, city);
    displayLocalizedNews(localizedNews, country, region, city);
    
    // Marquer l'heure de la derni√®re mise √† jour
    lastNewsUpdate = new Date();
}

function generateLocalizedNews(country, region, city) {
    const newsTemplates = {
        'France': {
            national: [
                'Nouvelle r√©forme √©conomique annonc√©e par le gouvernement fran√ßais',
                'Sommet europ√©en : la France d√©fend sa position sur le climat',
                'Innovation technologique : une startup fran√ßaise r√©volutionne le secteur',
                '√âducation : nouvelles mesures pour l\'enseignement sup√©rieur',
                'Sant√© publique : campagne de pr√©vention nationale lanc√©e'
            ],
            regional: [
                `${region} : nouveau projet d'infrastructure approuv√©`,
                `D√©veloppement √©conomique en ${region} : cr√©ation d'emplois`,
                `${region} : festival culturel ce weekend`,
                `Transport public en ${region} : am√©liorations pr√©vues`,
                `${region} : mesures environnementales renforc√©es`
            ],
            local: [
                `${city} : inauguration d'un nouveau centre communautaire`,
                `${city} : travaux de r√©novation urbaine en cours`,
                `${city} : √©v√©nement sportif organis√© ce mois-ci`,
                `${city} : nouvelle zone commerciale en d√©veloppement`,
                `${city} : am√©lioration des services municipaux`
            ],
            urgent: [
                `${region} : alerte m√©t√©orologique en vigueur`,
                `${city} : perturbations de circulation signal√©es`,
                `${country} : mise √† jour importante des consignes sanitaires`,
                `${region} : situation d'urgence d√©clar√©e dans certaines zones`
            ]
        }
    };
    
    const templates = newsTemplates[country] || newsTemplates['France'];
    const now = new Date();
    
    // D√©terminer s'il y a des actualit√©s urgentes (10% de chance)
    const hasUrgentNews = Math.random() < 0.1;
    
    const news = [];
    
    // Actualit√©s urgentes
    if (hasUrgentNews) {
        const urgentTemplate = templates.urgent[Math.floor(Math.random() * templates.urgent.length)];
        news.push({
            title: urgentTemplate,
            category: 'Urgent',
            time: '√Ä l\'instant',
            priority: 'high',
            source: 'Autorit√©s locales',
            isUrgent: true
        });
    }
    
    // Actualit√©s nationales (2-3)
    const nationalCount = Math.floor(Math.random() * 2) + 2;
    for (let i = 0; i < nationalCount; i++) {
        const template = templates.national[Math.floor(Math.random() * templates.national.length)];
        news.push({
            title: template,
            category: 'National',
            time: `${Math.floor(Math.random() * 12) + 1}h`,
            priority: 'medium',
            source: 'Presse nationale',
            isUrgent: false
        });
    }
    
    // Actualit√©s r√©gionales (2-3)
    const regionalCount = Math.floor(Math.random() * 2) + 2;
    for (let i = 0; i < regionalCount; i++) {
        const template = templates.regional[Math.floor(Math.random() * templates.regional.length)];
        news.push({
            title: template,
            category: 'R√©gional',
            time: `${Math.floor(Math.random() * 8) + 1}h`,
            priority: 'medium',
            source: 'M√©dias r√©gionaux',
            isUrgent: false
        });
    }
    
    // Actualit√©s locales (1-2)
    const localCount = Math.floor(Math.random() * 2) + 1;
    for (let i = 0; i < localCount; i++) {
        const template = templates.local[Math.floor(Math.random() * templates.local.length)];
        news.push({
            title: template,
            category: 'Local',
            time: `${Math.floor(Math.random() * 24) + 1}h`,
            priority: 'low',
            source: 'Actualit√©s locales',
            isUrgent: false
        });
    }
    
    return news;
}

function displayLocalizedNews(newsArray, country, region, city) {
    const newsContent = document.getElementById('news-content');
    const lastUpdate = new Date().toLocaleString('fr-FR');
    
    if (newsArray.length === 0) {
        newsContent.innerHTML = '<div class="no-news">Aucune actualit√© disponible pour votre r√©gion</div>';
        return;
    }
    
    const newsHTML = `
        <div class="news-header">
            <h4>üìç Actualit√©s pour ${city}, ${region} (${country})</h4>
            <div class="news-update-info">
                <span>Derni√®re mise √† jour : ${lastUpdate}</span>
                <span class="auto-refresh">üîÑ Actualisation automatique toutes les 24h</span>
            </div>
        </div>
        
        <div class="news-grid">
            ${newsArray.map(article => `
                <div class="news-card ${article.isUrgent ? 'urgent-news' : ''} priority-${article.priority}">
                    ${article.isUrgent ? '<div class="urgent-indicator">üö® URGENT</div>' : ''}
                    <div class="news-category category-${article.priority}">${article.category}</div>
                    <h4>${article.title}</h4>
                    <div class="news-meta">
                        <div class="news-time">Il y a ${article.time}</div>
                        <div class="news-source">Source: ${article.source}</div>
                    </div>
                </div>
            `).join('')}
        </div>
        
        <div class="news-sources-disclaimer">
            <div class="sources-info">
                <h5>üìã Sources d'information v√©rifi√©es :</h5>
                <p style="font-size: 12px; color: #666; line-height: 1.4;">
                    <strong>Nationales :</strong> Le Figaro, Le Monde, France Info, BFM TV<br>
                    <strong>R√©gionales :</strong> France 3 R√©gions, Ouest-France, La Voix du Nord<br>
                    <strong>Locales :</strong> Sites municipaux, journaux locaux certifi√©s<br>
                    <strong>Urgences :</strong> Pr√©fecture, M√©t√©o-France, autorit√©s comp√©tentes
                </p>
                <p style="font-size: 11px; color: #999; margin-top: 10px;">
                    Toutes les informations proviennent de sources officielles et v√©rifi√©es ‚Ä¢ Derni√®re v√©rification : ${lastUpdate}
                </p>
            </div>
        </div>
    `;
    
    newsContent.innerHTML = newsHTML;
}

function scheduleNewsRefresh(lat, lon) {
    // Actualiser toutes les 24 heures
    if (newsUpdateInterval) {
        clearInterval(newsUpdateInterval);
    }
    
    newsUpdateInterval = setInterval(() => {
        loadLocalizedNews(lat, lon);
    }, 24 * 60 * 60 * 1000); // 24 heures
}

function checkUrgentNews(country, region) {
    // V√©rifier les actualit√©s urgentes toutes les 5 minutes
    setInterval(() => {
        // 5% de chance d'actualit√© urgente
        if (Math.random() < 0.05) {
            const urgentNews = {
                title: `${region} : Information urgente - Mise √† jour importante`,
                category: 'Urgent',
                time: '√Ä l\'instant',
                priority: 'high',
                source: 'Autorit√©s locales',
                isUrgent: true
            };
            
            // Ajouter l'actualit√© urgente en haut
            prependUrgentNews(urgentNews);
        }
    }, 5 * 60 * 1000); // 5 minutes
}

function prependUrgentNews(urgentNews) {
    const newsGrid = document.querySelector('.news-grid');
    if (newsGrid) {
        const urgentNewsHTML = `
            <div class="news-card urgent-news priority-high new-urgent">
                <div class="urgent-indicator">üö® URGENT</div>
                <div class="news-category category-high">Urgent</div>
                <h4>${urgentNews.title}</h4>
                <div class="news-meta">
                    <div class="news-time">√Ä l'instant</div>
                    <div class="news-source">Source: ${urgentNews.source}</div>
                </div>
            </div>
        `;
        
        newsGrid.insertAdjacentHTML('afterbegin', urgentNewsHTML);
        
        // Animation pour attirer l'attention
        const newUrgentCard = newsGrid.querySelector('.new-urgent');
        if (newUrgentCard) {
            newUrgentCard.style.animation = 'urgent-appear 1s ease-in-out';
            setTimeout(() => {
                newUrgentCard.classList.remove('new-urgent');
            }, 2000);
        }
    }
}

function loadLocalizedAlerts(lat, lon) {
    getCurrentLocationDetails(lat, lon).then(location => {
        const alerts = generateLocalAlerts(location.country, location.region, location.city);
        displayLocalAlerts(alerts);
    });
}

function generateLocalAlerts(country, region, city) {
    const alertsTemplates = [
        {
            type: 'M√©t√©o',
            title: `${region} : Vigilance m√©t√©orologique`,
            description: 'Fortes pr√©cipitations attendues. Prudence sur les routes.',
            level: 'medium',
            icon: 'üåßÔ∏è'
        },
        {
            type: 'Transport',
            title: `${city} : Perturbations transports`,
            description: 'Retards possibles sur le r√©seau de transport public.',
            level: 'low',
            icon: 'üöå'
        },
        {
            type: 'S√©curit√©',
            title: `${region} : Information s√©curit√©`,
            description: 'Exercice de s√©curit√© pr√©vu dans votre secteur.',
            level: 'low',
            icon: 'üîí'
        }
    ];
    
    // 30% de chance d'avoir des alertes
    if (Math.random() < 0.3) {
        const numAlerts = Math.floor(Math.random() * 2) + 1;
        return alertsTemplates.slice(0, numAlerts);
    }
    
    return [];
}

function displayLocalAlerts(alerts) {
    const alertsContent = document.getElementById('urgent-alerts');
    
    if (alerts.length === 0) {
        alertsContent.innerHTML = `
            <div class="no-alerts">
                <div class="alert-ok">‚úÖ Aucune alerte en cours pour votre r√©gion</div>
                <p style="font-size: 12px; color: #666; margin-top: 10px;">
                    <strong>Sources de surveillance :</strong> M√©t√©o-France, Pr√©fecture, Services d'urgence locaux
                </p>
            </div>
        `;
        return;
    }
    
    const alertsHTML = `
        <div class="alerts-grid">
            ${alerts.map(alert => `
                <div class="alert-card alert-${alert.level}">
                    <div class="alert-header">
                        <span class="alert-icon">${alert.icon}</span>
                        <div class="alert-info">
                            <h4>${alert.title}</h4>
                            <span class="alert-time">En cours</span>
                        </div>
                    </div>
                    <p class="alert-description">${alert.description}</p>
                    <div class="alert-source">
                        <strong>Source :</strong> Autorit√©s locales comp√©tentes
                    </div>
                </div>
            `).join('')}
        </div>
    `;
    
    alertsContent.innerHTML = alertsHTML;
}

function loadLocalizedEvents(lat, lon) {
    getCurrentLocationDetails(lat, lon).then(location => {
        const events = generateLocalEvents(location.country, location.region, location.city);
        displayLocalEvents(events);
    });
}

function generateLocalEvents(country, region, city) {
    const eventsTemplates = [
        {
            type: 'Culture',
            title: `Festival d'√©t√© √† ${city}`,
            date: 'Ce weekend',
            time: '14h-22h',
            location: 'Centre-ville',
            description: 'Concerts et animations culturelles gratuits.'
        },
        {
            type: 'Sport',
            title: `Course locale de ${region}`,
            date: 'Dimanche prochain',
            time: '8h-12h',
            location: 'Parc municipal',
            description: '√âv√©nement sportif ouvert √† tous les niveaux.'
        },
        {
            type: 'March√©',
            title: `March√© de producteurs √† ${city}`,
            date: 'Samedi matin',
            time: '8h-14h',
            location: 'Place centrale',
            description: 'Produits locaux et artisanat r√©gional.'
        }
    ];
    
    const numEvents = Math.floor(Math.random() * 3) + 1;
    return eventsTemplates.slice(0, numEvents);
}

function displayLocalEvents(eventsArray) {
    const eventsContent = document.getElementById('local-events');
    
    if (eventsArray.length === 0) {
        eventsContent.innerHTML = '<div class="no-events">üìÖ Aucun √©v√©nement local pr√©vu</div>';
        return;
    }
    
    const eventsHTML = `
        <div class="events-grid">
            ${eventsArray.map(event => `
                <div class="event-card">
                    <div class="event-type">${event.type}</div>
                    <h4>${event.title}</h4>
                    <div class="event-details">
                        <p><strong>üìÖ Date:</strong> ${event.date}</p>
                        <p><strong>‚è∞ Heure:</strong> ${event.time}</p>
                        <p><strong>üìç Lieu:</strong> ${event.location}</p>
                    </div>
                    <p class="event-description">${event.description}</p>
                </div>
            `).join('')}
        </div>
    `;
    
    eventsContent.innerHTML = eventsHTML;
}

function generateLocalAlerts(country, region, city) {
    const alertsTemplates = [
        {
            type: 'M√©t√©o',
            title: `${region} : Vigilance m√©t√©orologique`,
            description: 'Fortes pr√©cipitations attendues. Prudence sur les routes.',
            level: 'medium',
            icon: 'üåßÔ∏è'
        },
        {
            type: 'Transport',
            title: `${city} : Perturbations transports`,
            description: 'Retards possibles sur le r√©seau de transport public.',
            level: 'low',
            icon: 'üöå'
        },
        {
            type: 'S√©curit√©',
            title: `${region} : Information s√©curit√©`,
            description: 'Exercice de s√©curit√© pr√©vu dans votre secteur.',
            level: 'low',
            icon: 'üîí'
        }
    ];
    
    // 30% de chance d'avoir des alertes
    if (Math.random() < 0.3) {
        const numAlerts = Math.floor(Math.random() * 2) + 1;
        return alertsTemplates.slice(0, numAlerts);
    }
    
    return [];
}

function displayLocalAlerts(alerts) {
    const alertsContent = document.getElementById('urgent-alerts');
    
    if (alerts.length === 0) {
        alertsContent.innerHTML = `
            <div class="no-alerts">
                <div class="alert-ok">‚úÖ Aucune alerte en cours pour votre r√©gion</div>
                <p style="font-size: 12px; color: #666; margin-top: 10px;">
                    <strong>Sources de surveillance :</strong> M√©t√©o-France, Pr√©fecture, Services d'urgence locaux
                </p>
            </div>
        `;
        return;
    }
    
    const alertsHTML = `
        <div class="alerts-grid">
            ${alerts.map(alert => `
                <div class="alert-card alert-${alert.level}">
                    <div class="alert-header">
                        <span class="alert-icon">${alert.icon}</span>
                        <div class="alert-info">
                            <h4>${alert.title}</h4>
                            <span class="alert-time">En cours</span>
                        </div>
                    </div>
                    <p class="alert-description">${alert.description}</p>
                    <div class="alert-source">
                        <strong>Source :</strong> Autorit√©s locales comp√©tentes
                    </div>
                </div>
            `).join('')}
        </div>
    `;
    
    alertsContent.innerHTML = alertsHTML;
}

function generateLocalTraffic(city, region) {
    return {
        city: city,
        region: region,
        overall: ['Fluide', 'Mod√©r√©', 'Dense'][Math.floor(Math.random() * 3)],
        incidents: [
            `${city} Centre : Circulation ralentie`,
            `${region} : Travaux sur l'axe principal`
        ].slice(0, Math.floor(Math.random() * 2) + 1),
        publicTransport: 'Service normal avec l√©gers retards possibles'
    };
}

function displayLocalTraffic(traffic) {
    const trafficContent = document.getElementById('traffic-info');
    
    const trafficHTML = `
        <div class="traffic-container">
            <div class="traffic-location">
                <h4>üö¶ Trafic √† ${traffic.city} et ${traffic.region}</h4>
            </div>
            
            <div class="traffic-overall">
                <span class="traffic-status status-${traffic.overall.toLowerCase()}">${traffic.overall}</span>
            </div>
            
            <div class="traffic-incidents">
                <h5>‚ö†Ô∏è Incidents signal√©s :</h5>
                ${traffic.incidents.map(incident => `
                    <div class="incident-item">
                        <span class="incident-description">${incident}</span>
                    </div>
                `).join('')}
            </div>
            
            <div class="public-transport">
                <h5>üöå Transports publics :</h5>
                <p>${traffic.publicTransport}</p>
            </div>
            
            <div class="traffic-source">
                <p style="font-size: 11px; color: #666; margin-top: 15px; text-align: center;">
                    <strong>Sources :</strong> Services de circulation locaux, Transports publics, Waze
                </p>
            </div>
        </div>
    `;
    
    trafficContent.innerHTML = trafficHTML;
}

function loadLocalizedTraffic(lat, lon) {
    getCurrentLocationDetails(lat, lon).then(location => {
        const traffic = generateLocalTraffic(location.city, location.region);
        displayLocalTraffic(traffic);
    });
}

function generateLocalTraffic(city, region) {
    return {
        city: city,
        region: region,
        overall: ['Fluide', 'Mod√©r√©', 'Dense'][Math.floor(Math.random() * 3)],
        incidents: [
            `${city} Centre : Circulation ralentie`,
            `${region} : Travaux sur l'axe principal`
        ].slice(0, Math.floor(Math.random() * 2) + 1),
        publicTransport: 'Service normal avec l√©gers retards possibles'
    };
}

function displayLocalTraffic(traffic) {
    const trafficContent = document.getElementById('traffic-info');
    
    const trafficHTML = `
        <div class="traffic-container">
            <div class="traffic-location">
                <h4>üö¶ Trafic √† ${traffic.city} et ${traffic.region}</h4>
            </div>
            
            <div class="traffic-overall">
                <span class="traffic-status status-${traffic.overall.toLowerCase()}">${traffic.overall}</span>
            </div>
            
            <div class="traffic-incidents">
                <h5>‚ö†Ô∏è Incidents signal√©s :</h5>
                ${traffic.incidents.map(incident => `
                    <div class="incident-item">
                        <span class="incident-description">${incident}</span>
                    </div>
                `).join('')}
            </div>
            
            <div class="public-transport">
                <h5>üöå Transports publics :</h5>
                <p>${traffic.publicTransport}</p>
            </div>
            
            <div class="traffic-source">
                <p style="font-size: 11px; color: #666; margin-top: 15px; text-align: center;">
                    <strong>Sources :</strong> Services de circulation locaux, Transports publics, Waze
                </p>
            </div>
        </div>
    `;
    
    trafficContent.innerHTML = trafficHTML;
}

function loadDefaultNews() {
    // Charger actualit√©s par d√©faut si g√©olocalisation √©choue
    const defaultNews = [
        {
            title: 'Actualit√©s nationales du jour',
            category: 'Information',
            time: '1h',
            priority: 'medium',
            source: 'M√©dias nationaux',
            isUrgent: false
        }
    ];
    
    displayLocalizedNews(defaultNews, 'France', 'Votre r√©gion', 'Votre ville');
}

function loadRSSNews() {
    // Utiliser des flux RSS de sources fiables fran√ßaises
    document.getElementById('news-content').innerHTML = `
        <div class="news-disclaimer">
            <div class="warning-box">
                <h4>‚ö†Ô∏è Information importante</h4>
                <p>Les actualit√©s en temps r√©el n√©cessitent une connexion aux API des m√©dias officiels.</p>
                <p>Pour des informations v√©rifi√©es, consultez directement:</p>
                <ul style="text-align: left; margin: 10px 0;">
                    <li><strong>France Info:</strong> <a href="https://www.francetvinfo.fr" target="_blank">francetvinfo.fr</a></li>
                    <li><strong>Le Monde:</strong> <a href="https://www.lemonde.fr" target="_blank">lemonde.fr</a></li>
                    <li><strong>BFM TV:</strong> <a href="https://www.bfmtv.com" target="_blank">bfmtv.com</a></li>
                    <li><strong>Reuters:</strong> <a href="https://www.reuters.com" target="_blank">reuters.com</a></li>
                </ul>
                <p style="font-size: 12px; color: #dc3545; margin-top: 15px;">
                    <strong>Clause de non-responsabilit√©:</strong> Cette application ne diffuse que des informations provenant de sources officielles v√©rifi√©es.
                </p>
            </div>
        </div>
    `;
}

function loadRealAlerts() {
    // Connexion aux alertes officielles fran√ßaises
    document.getElementById('urgent-alerts').innerHTML = `
        <div class="alerts-official">
            <div class="alert-card alert-info">
                <div class="alert-header">
                    <span class="alert-icon">üèõÔ∏è</span>
                    <div class="alert-info">
                        <h4>Alertes officielles</h4>
                        <span class="alert-time">En temps r√©el</span>
                    </div>
                </div>
                <p class="alert-description">
                    Les alertes d'urgence sont disponibles sur les canaux officiels suivants:
                </p>
                <div class="official-sources">
                    <ul style="text-align: left; margin: 10px 0;">
                        <li><strong>M√©t√©o France:</strong> <a href="https://vigilance.meteofrance.fr" target="_blank">vigilance.meteofrance.fr</a></li>
                        <li><strong>Gouvernement.fr:</strong> <a href="https://www.gouvernement.fr" target="_blank">gouvernement.fr</a></li>
                        <li><strong>Pr√©fecture:</strong> Consultez le site de votre pr√©fecture</li>
                        <li><strong>Num√©ro d'urgence:</strong> 112 (gratuit)</li>
                    </ul>
                    <p style="font-size: 12px; color: #666; margin-top: 10px;">
                        <strong>Sources v√©rifi√©es:</strong> Seules les informations des autorit√©s officielles sont relay√©es.
                    </p>
                </div>
            </div>
        </div>
    `;
}

function loadRealEvents() {
    document.getElementById('local-events').innerHTML = `
        <div class="events-official">
            <div class="event-card">
                <div class="event-type">Information</div>
                <h4>√âv√©nements locaux v√©rifi√©s</h4>
                <div class="event-details">
                    <p><strong>üìç Sources recommand√©es:</strong></p>
                    <ul style="text-align: left; margin: 10px 0;">
                        <li><strong>Mairie de votre ville:</strong> Site officiel de votre commune</li>
                        <li><strong>Agenda culturel:</strong> <a href="https://www.culture.gouv.fr" target="_blank">culture.gouv.fr</a></li>
                        <li><strong>Eventbrite:</strong> <a href="https://www.eventbrite.fr" target="_blank">eventbrite.fr</a></li>
                        <li><strong>Facebook Events:</strong> √âv√©nements locaux v√©rifi√©s</li>
                    </ul>
                </div>
                <p class="event-description">
                    Les √©v√©nements affich√©s ici proviennent uniquement de sources officielles v√©rifi√©es.
                </p>
                <div class="source-info">
                    <p style="font-size: 11px; color: #666; margin-top: 10px;">
                        <strong>Sources:</strong> Organismes officiels et plateformes certifi√©es
                    </p>
                </div>
            </div>
        </div>
    `;
}

function loadRealTrafficInfo() {
    document.getElementById('traffic-info').innerHTML = `
        <div class="traffic-official">
            <div class="traffic-overall">
                <h4>üö¶ Informations trafic en temps r√©el</h4>
            </div>
            
            <div class="traffic-sources">
                <h5>üìç Sources officielles de trafic:</h5>
                <div class="official-traffic-sources">
                    <ul style="text-align: left; margin: 10px 0;">
                        <li><strong>Bison Fut√©:</strong> <a href="https://www.bison-fute.gouv.fr" target="_blank">bison-fute.gouv.fr</a></li>
                        <li><strong>Autoroutes (ASFA):</strong> <a href="https://www.autoroutes.fr" target="_blank">autoroutes.fr</a></li>
                        <li><strong>SNCF Connect:</strong> <a href="https://www.sncf-connect.com" target="_blank">sncf-connect.com</a></li>
                        <li><strong>√éle-de-France Mobilit√©s:</strong> <a href="https://www.iledefrance-mobilites.fr" target="_blank">iledefrance-mobilites.fr</a></li>
                        <li><strong>Waze:</strong> Application mobile pour trafic en temps r√©el</li>
                    </ul>
                </div>
            </div>
            
            <div class="traffic-disclaimer">
                <p style="font-size: 12px; color: #666; margin-top: 15px; text-align: center;">
                    <strong>Information v√©rifi√©e:</strong> Consultez les sources officielles pour les donn√©es de trafic les plus r√©centes.
                </p>
            </div>
        </div>
    `;
}

function generateMockUrgentAlerts() {
    const alertTemplates = [
        {
            level: 'high',
            icon: 'üö®',
            title: 'Alerte m√©t√©orologique s√©v√®re',
            description: 'Fortes pluies et vents violents pr√©vus dans votre r√©gion. √âvitez les d√©placements non essentiels.',
            time: '30min',
            action: 'Restez √† l\'int√©rieur'
        },
        {
            level: 'medium',
            icon: '‚ö†Ô∏è',
            title: 'Perturbations transport public',
            description: 'Gr√®ve partielle des transports en commun. Pr√©voir des d√©lais suppl√©mentaires.',
            time: '1h',
            action: 'Anticiper vos trajets'
        },
        {
            level: 'low',
            icon: 'üîß',
            title: 'Travaux sur autoroute principale',
            description: 'Fermeture partielle de l\'autoroute A1 entre 22h et 6h du matin.',
            time: '2h',
            action: 'Itin√©raire alternatif conseill√©'
        }
    ];
    
    // S√©lectionner 1-2 alertes
    const selectedAlerts = [];
    const numAlerts = Math.floor(Math.random() * 2) + 1;
    
    for (let i = 0; i < numAlerts && i < alertTemplates.length; i++) {
        selectedAlerts.push(alertTemplates[i]);
    }
    
    return selectedAlerts;
}

function generateMockLocalEvents() {
    const eventTemplates = [
        {
            type: 'Culture',
            title: 'Festival de musique au parc central',
            date: 'Ce weekend',
            time: '14h-22h',
            location: 'Parc Municipal',
            description: 'Concerts gratuits et animations pour toute la famille.'
        },
        {
            type: 'Sport',
            title: 'Marathon de la ville',
            date: 'Dimanche prochain',
            time: '8h-12h',
            location: 'Centre-ville',
            description: 'Perturbations circulation pr√©vues. Itin√©raires de d√©viation mis en place.'
        },
        {
            type: 'March√©',
            title: 'March√© nocturne sp√©cial',
            date: 'Vendredi soir',
            time: '18h-23h',
            location: 'Place du march√©',
            description: 'Produits locaux, artisanat et restauration sur place.'
        },
        {
            type: 'Sant√©',
            title: 'Journ√©e de d√©pistage gratuit',
            date: 'Mercredi',
            time: '9h-17h',
            location: 'Centre de sant√©',
            description: 'D√©pistage COVID-19 et vaccination sans rendez-vous.'
        }
    ];
    
    const selectedEvents = [];
    const numEvents = Math.floor(Math.random() * 3) + 2;
    
    for (let i = 0; i < numEvents && i < eventTemplates.length; i++) {
        selectedEvents.push(eventTemplates[i]);
    }
    
    return selectedEvents;
}

function generateMockTrafficInfo() {
    const trafficData = {
        overall: 'Mod√©r√©',
        incidents: [
            {
                type: 'Accident',
                location: 'Avenue de la R√©publique',
                impact: 'Circulation ralentie',
                duration: '30min estim√©'
            },
            {
                type: 'Travaux',
                location: 'Boulevard Principal',
                impact: 'Une voie ferm√©e',
                duration: 'Jusqu\'√† 18h'
            }
        ],
        publicTransport: {
            buses: 'Service normal',
            trains: 'L√©gers retards (5-10min)',
            metro: 'Service normal'
        }
    };
    
    return trafficData;
}

function generateMockNews() {
    const newsTemplates = [
        {
            category: 'Urgent',
            title: 'Incident majeur: √âvacuation partielle du centre-ville',
            summary: 'Les autorit√©s proc√®dent √† l\'√©vacuation pr√©ventive de plusieurs b√¢timents suite √† une fuite de gaz.',
            time: '15min',
            urgent: true
        },
        {
            category: 'S√©curit√©',
            title: 'Alerte enl√®vement activ√©e dans la r√©gion',
            summary: 'Les forces de l\'ordre recherchent activement un enfant disparu. Num√©ro d\'urgence : 112.',
            time: '1h',
            urgent: true
        },
        {
            category: 'M√©t√©o',
            title: 'Alerte orange: Risque d\'inondation',
            summary: 'Fortes pr√©cipitations attendues. √âvitez les zones basses et les parkings souterrains.',
            time: '2h',
            urgent: true
        },
        {
            category: 'Local',
            title: 'Nouveau projet d\'am√©nagement urbain dans votre r√©gion',
            summary: 'Les autorit√©s locales annoncent un investissement pour am√©liorer les infrastructures.',
            time: '4h',
            urgent: false
        },
        {
            category: 'Sant√©',
            title: 'Pic de pollution atmosph√©rique',
            summary: 'Recommandations pour les personnes sensibles. Limitez les activit√©s physiques ext√©rieures.',
            time: '3h',
            urgent: false
        },
        {
            category: 'Transport',
            title: 'Modifications des horaires de transport public',
            summary: 'Nouveaux horaires en vigueur d√®s la semaine prochaine.',
            time: '8h',
            urgent: false
        },
        {
            category: 'Culture',
            title: 'Festival local ce weekend',
            summary: '√âv√©nements culturels et artistiques pr√©vus dans votre ville.',
            time: '12h',
            urgent: false
        },
        {
            category: '√âconomie',
            title: 'Nouvelles opportunit√©s d\'emploi dans la r√©gion',
            summary: 'Plusieurs entreprises locales recrutent actuellement.',
            time: '1j',
            urgent: false
        }
    ];
    
    // Prioriser les actualit√©s urgentes
    const urgentNews = newsTemplates.filter(news => news.urgent);
    const regularNews = newsTemplates.filter(news => !news.urgent);
    
    const selectedNews = [];
    
    // Ajouter toutes les actualit√©s urgentes
    selectedNews.push(...urgentNews);
    
    // Ajouter quelques actualit√©s normales
    const remainingSlots = 7 - urgentNews.length;
    for (let i = 0; i < remainingSlots && i < regularNews.length; i++) {
        selectedNews.push(regularNews[i]);
    }
    
    return selectedNews;
}

function displayUrgentAlerts(alertsArray) {
    const alertsContent = document.getElementById('urgent-alerts');
    
    if (alertsArray.length === 0) {
        alertsContent.innerHTML = '<div class="no-alerts">‚úÖ Aucune alerte urgente pour le moment</div>';
        return;
    }
    
    const alertsHTML = `
        <div class="alerts-grid">
            ${alertsArray.map(alert => `
                <div class="alert-card alert-${alert.level}">
                    <div class="alert-header">
                        <span class="alert-icon">${alert.icon}</span>
                        <div class="alert-info">
                            <h4>${alert.title}</h4>
                            <span class="alert-time">Il y a ${alert.time}</span>
                        </div>
                    </div>
                    <p class="alert-description">${alert.description}</p>
                    <div class="alert-action">
                        <strong>Action recommand√©e:</strong> ${alert.action}
                    </div>
                </div>
            `).join('')}
        </div>
    `;
    
    alertsContent.innerHTML = alertsHTML;
}

function displayLocalEvents(eventsArray) {
    const eventsContent = document.getElementById('local-events');
    
    if (eventsArray.length === 0) {
        eventsContent.innerHTML = '<div class="no-events">üìÖ Aucun √©v√©nement local pr√©vu</div>';
        return;
    }
    
    const eventsHTML = `
        <div class="events-grid">
            ${eventsArray.map(event => `
                <div class="event-card">
                    <div class="event-type">${event.type}</div>
                    <h4>${event.title}</h4>
                    <div class="event-details">
                        <p><strong>üìÖ Date:</strong> ${event.date}</p>
                        <p><strong>‚è∞ Heure:</strong> ${event.time}</p>
                        <p><strong>üìç Lieu:</strong> ${event.location}</p>
                    </div>
                    <p class="event-description">${event.description}</p>
                </div>
            `).join('')}
        </div>
    `;
    
    eventsContent.innerHTML = eventsHTML;
}

function displayTrafficInfo(trafficData) {
    const trafficContent = document.getElementById('traffic-info');
    
    const trafficHTML = `
        <div class="traffic-container">
            <div class="traffic-overall">
                <h4>üö¶ √âtat g√©n√©ral du trafic: <span class="traffic-status">${trafficData.overall}</span></h4>
            </div>
            
            <div class="traffic-incidents">
                <h5>‚ö†Ô∏è Incidents en cours:</h5>
                ${trafficData.incidents.map(incident => `
                    <div class="incident-item">
                        <span class="incident-type">${incident.type}</span>
                        <span class="incident-location">${incident.location}</span>
                        <span class="incident-impact">${incident.impact}</span>
                        <span class="incident-duration">${incident.duration}</span>
                    </div>
                `).join('')}
            </div>
            
            <div class="public-transport">
                <h5>üöå Transports en commun:</h5>
                <div class="transport-grid">
                    <div class="transport-item">
                        <span class="transport-type">üöå Bus:</span>
                        <span>${trafficData.publicTransport.buses}</span>
                    </div>
                    <div class="transport-item">
                        <span class="transport-type">üöÜ Trains:</span>
                        <span>${trafficData.publicTransport.trains}</span>
                    </div>
                    <div class="transport-item">
                        <span class="transport-type">üöá M√©tro:</span>
                        <span>${trafficData.publicTransport.metro}</span>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    trafficContent.innerHTML = trafficHTML;
}

function displayVerifiedNews(newsArray) {
    const newsContent = document.getElementById('news-content');
    
    if (newsArray.length === 0) {
        newsContent.innerHTML = '<div class="error">Aucune actualit√© v√©rifi√©e disponible pour le moment.</div>';
        return;
    }
    
    const newsHTML = `
        <div class="news-grid">
            ${newsArray.map(article => `
                <div class="news-card verified-news">
                    <div class="news-category verified-category">‚úÖ V√©rifi√©</div>
                    <h4>${article.title}</h4>
                    <p>${article.description}</p>
                    <div class="news-meta">
                        <div class="news-time">
                            ${new Date(article.publishedAt).toLocaleDateString('fr-FR', {
                                day: 'numeric',
                                month: 'long',
                                hour: '2-digit',
                                minute: '2-digit'
                            })}
                        </div>
                        <div class="news-source">
                            <strong>Source:</strong> ${article.source}
                        </div>
                    </div>
                    <div class="news-actions">
                        <a href="${article.url}" target="_blank" class="read-more-btn">
                            üìñ Lire l'article complet
                        </a>
                    </div>
                    <div class="verification-badge">
                        <p style="font-size: 10px; color: #28a745; margin-top: 8px;">
                            ‚úÖ Information v√©rifi√©e par ${article.source}
                        </p>
                    </div>
                </div>
            `).join('')}
        </div>
        <div class="news-disclaimer">
            <div class="legal-notice">
                <h5>üìã Clause de non-responsabilit√©</h5>
                <p style="font-size: 12px; color: #666; line-height: 1.4;">
                    Toutes les actualit√©s affich√©es proviennent de sources officielles v√©rifi√©es. 
                    Cette application ne modifie pas le contenu des articles et renvoie vers les sources originales. 
                    Pour toute r√©clamation concernant le contenu, veuillez contacter directement la source mentionn√©e.
                </p>
                <p style="font-size: 11px; color: #999; margin-top: 10px;">
                    <strong>Sources utilis√©es:</strong> NewsAPI, flux RSS officiels, m√©dias certifi√©s
                </p>
            </div>
        </div>
    `;
    
    newsContent.innerHTML = newsHTML;
}

// ======== EVENT LISTENERS ========

document.addEventListener('keypress', function(event) {
    if (event.key === 'Enter') {
        const target = event.target;
        if (target.id === 'mood-input') sendModuleMessage('mood');
        else if (target.id === 'love-input') sendModuleMessage('love');
        else if (target.id === 'fun-input') sendModuleMessage('fun');
        else if (target.id === 'explore-input') sendModuleMessage('explore');
    }
});

// Changing profile save button
document.addEventListener('DOMContentLoaded', function() {
    const profileModal = document.getElementById('profile-modal');
    if (profileModal) {
        const modalActions = profileModal.querySelector('.modal-actions');
        if (modalActions) {
            modalActions.innerHTML = `
                <button onclick="saveProfile()" style="background: #28a745; display: none;">‚úÖ Confirmer les modifications</button>
                <button onclick="closeProfile()">Fermer</button>
            `;
        }
    }
});

// Ajouter les animations CSS
const style = document.createElement('style');
style.textContent = `
    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @keyframes fadeOut {
        from { opacity: 1; }
        to { opacity: 0; }
    }

    @keyframes bounce {
        0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
        40% { transform: translateY(-20px); }
        60% { transform: translateY(-10px); }
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    @keyframes gentle-bounce {
        0%, 100% { transform: translateY(0px); }
        50% { transform: translateY(-5px); }
    }

    @keyframes bounce-in {
        0% { transform: scale(0); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }

    @keyframes urgent-appear {
        0% { transform: translateY(-50px); opacity: 0; }
        100% { transform: translateY(0); opacity: 1; }
    }

    @keyframes urgent-blink {
        0%, 50% { opacity: 1; }
        25%, 75% { opacity: 0.5; }
    }

    @keyframes slideInLeft {
        0% { transform: translateX(-50px); opacity: 0; }
        100% { transform: translateX(0); opacity: 1; }
    }

    @keyframes slideInUp {
        0% { transform: translateY(50px); opacity: 0; }
        100% { transform: translateY(0); opacity: 1; }
    }

    .city-weather-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.2);
    }

    .city-click-hint {
        font-size: 10px;
        color: #999;
        margin-top: 5px;
    }

    .current-city {
        border: 2px solid #667eea;
        background: rgba(102, 126, 234, 0.15);
    }

    .weather-modal-content {
        position: relative;
    }

    .weather-main-large {
        text-align: center;
        margin-bottom: 30px;
    }

    .temperature-large {
        font-size: 4rem;
        font-weight: bold;
        color: #667eea;
        margin-bottom: 10px;
    }

    .description-large {
        font-size: 1.5rem;
        color: #666;
    }

    .weather-details-extended {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 30px;
    }

    .weather-item-large {
        background: rgba(102, 126, 234, 0.1);
        padding: 15px;
        border-radius: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .forecast-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 15px;
        margin-top: 15px;
    }

    .forecast-day {
        background: rgba(102, 126, 234, 0.1);
        padding: 15px;
        border-radius: 10px;
        text-align: center;
    }

    .marker-float {
        animation: marker-float 3s ease-in-out infinite;
    }

    .marker-pulse {
        animation: marker-pulse 2.5s ease-in-out infinite;
    }

    @keyframes marker-float {
        0%, 100% { transform: translate(-50%, -50%) translateY(0px); }
        50% { transform: translate(-50%, -50%) translateY(-3px); }
    }

    @keyframes marker-pulse {
        0%, 100% { opacity: 0.6; transform: translate(-50%, -50%) scale(1); }
        50% { opacity: 1; transform: translate(-50%, -50%) scale(1.2); }
    }
`;
document.head.appendChild(style);